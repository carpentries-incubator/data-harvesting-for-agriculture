I"˙5<!-- #knitr::opts_chunk$set(echo = TRUE, fig.path='../figure/') -->

<h4 id="motivating-questions">Motivating Questions:</h4>
<ul>
  <li>What are the common file types in agricultural data?</li>
  <li>What applications do I need to open these files?</li>
  <li>How can I make maps of my yield or application?</li>
</ul>

<h4 id="objectives-with-spatial-data">Objectives with Spatial Data:</h4>
<ul>
  <li>Determine whether data are stored in vector or raster format</li>
  <li>Identify the coordinate system for a dataset</li>
  <li>Talk about when data don‚Äôt have a projection defined (missing .prj file)</li>
  <li>Determine UTM zone of a dataset</li>
  <li>Reproject the dataset into UTM</li>
  <li>Import geospatial files into your R environment</li>
  <li>Visualize geospatial data with R</li>
  <li>Create geospatial files from lat/long coordinates</li>
  <li>Create an ab-line</li>
</ul>

<h4 id="keypoints">Keypoints:</h4>
<ul>
  <li>sf is prefereable for data analysis; it is easier to access the dataframe</li>
  <li>Projecting your data in utm is necessary for many of the geometric operations
you perform (e.g. making trial grids and splitting plots into subplot data)</li>
  <li>Different data formats that you are likely to encounter include gpkg, shp
(cpg, dbf, prj, sbn, sbx), geojson, and tif <strong>Dena: We don‚Äôt discuss most of these in the lesson - tweak description or add overview?</strong></li>
</ul>

<!-- Setup -->

<h3 id="introducing-spatial-data-with-ssurgo-data">Introducing Spatial Data with SSURGO data</h3>

<p><strong>Dena: This would be a good point for an ‚ÄúWe‚Äôre starting with a bunch of miscellanous files and by the end of this lesson here‚Äôs
the things you‚Äôll be able to do with them‚Äù overview? Rough notes below, they just aren‚Äôt pre-bolded‚Ä¶</strong></p>

<p>**Spatial data can be stored in many different ways, and an important part of using your farm‚Äôs data will involve understanding
what format your data is already in and what format another program needs it to be in. During the course of this lesson, we‚Äôll learn:</p>

<ul>
  <li>How to identify which coordinate reference system a data file is using</li>
  <li>How, when, and why to transform data from the WGS84 standard to the UTM standard (or vice versa)</li>
  <li>How to save the transformed data as a new file</li>
  <li>Some ways of creating visualizations from your data</li>
  <li>How to get key soil type data for your farm from the publicly available SSURGO database
<strong>/end add?</strong></li>
</ul>

<h4 id="what-is-a-crs">What is a CRS?</h4>

<p>Geospatial data has a coordinate reference system (CRS) that reports how the map is projected and what point is used as a reference. A projection is a way of making the earth‚Äôs curved surface fit into something you 
can represent on a flat computer screen. The point used for reference during projection is called a datum.</p>

<h2 id="importance-of-projections">Importance of Projections</h2>
<p>To understand why projection matters, take a look
at the difference between <a href="https://en.wikipedia.org/wiki/Mercator_projection#/media/File:Mercator_projection_Square.JPG">the Mercator projection</a> of the world and the 
<a href="https://en.wikipedia.org/wiki/Boggs_eumorphic_projection#/media/File:Boggs_eumorphic_projection_SW.JPG">Boggs eumorphic projection</a></p>

<p>In the Mercator projection, space that doesn‚Äôt exist is created to make a ‚Äúflat‚Äù map 
and Greenland and Antarctica disproportionately huge. In the Boggs projection, strategic 
slices are cut out of the ocean so that the sizes appear a bit closer to true, but Canada 
and Russia get pinched and Greenland gets bisected. There will always be some compromises 
made in a projection system that converts curved surfaces to flat ones for the same reason 
that it‚Äôs difficult to make an orange peel lie flat. So the method you select will have an 
effect on your outcome.</p>

<h4 id="reading-in-the-boundary-file">Reading in the Boundary File</h4>

<p>Before we can look at a CRS in R, we need to have a geospatial file in the R environment. We will bring in the field boundary. Use the function <code class="highlighter-rouge">read_sf()</code> to bring the dataset into your R environment.
<strong>Dena‚Äôs rewrite: Because we have already set the working directory for this file, we don‚Äôt need to
give the whole path, just the data subdirectory that the gpkg file is stored within.</strong></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundary</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_sf</span><span class="p">(</span><span class="s2">"data/boundary_transformed.gpkg"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error: Cannot open "data/boundary_transformed.gpkg"; The file doesn't seem to exist.
</code></pre></div></div>

<p>There are many functions for reading files into the
environment, but <code class="highlighter-rouge">read_sf()</code> creates an object of class <strong><code class="highlighter-rouge">sf</code></strong> or <strong>simple feature.</strong> This class
makes accessing spatial data much easier. Much like a data frame, you can access
variables within an <code class="highlighter-rouge">sf</code> object using the <code class="highlighter-rouge">$</code> operator. For this and other reasons like the number of spatial
calculations available for <code class="highlighter-rouge">sf</code> objects, this class is perferred in most situations.</p>

<h4 id="check-the-coordinate-reference-system">Check the coordinate reference system</h4>

<p>The function for retreiving the CRS of a simple feature is <code class="highlighter-rouge">st_crs().</code> Generally it is good practice to know the CRS of your files, but before combining files and performing operations on geospatial data, it is particularly important. Some commands will not work if the data is in the wrong CRS or if two dataframes are in different CRSs.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_crs</span><span class="p">(</span><span class="n">boundary</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error in st_crs(boundary): object 'boundary' not found
</code></pre></div></div>
<p>The boundary file is projected in longitude and latitude using the WGS84 datum. This will be the CRS of most of the data you see.</p>

<p>Sometimes when looking at a shapefile, the .prj file can be lost. Then <code class="highlighter-rouge">st_crs()</code> will 
return empty, but <code class="highlighter-rouge">sf</code> objects contain a geometry column. We can see the geometric points 
for the vertices of each polygon or the points in the data.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">(</span><span class="n">boundary</span><span class="o">$</span><span class="n">geom</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error in head(boundary$geom): object 'boundary' not found
</code></pre></div></div>

<p>The trial design is in lat/long using WGS84.</p>

<h2 id="utm-zones">UTM Zones</h2>

<p>Some coordinate reference systems, such as UTM zones, are measured in meters. 
Latitude and longitude represent a different type of CRS, defined in terms of angles 
across a sphere. If we want to create measures of distance, we need the trial design 
in UTM. But there are many UTM zones, so we must determine the zone of the trial area.</p>

<p>The UTM system divides the surface of Earth between 80¬∞S and 84¬∞N latitude into
60 zones, each 6¬∞ of longitude in width. Zone 1 covers longitude 180¬∞ to 174¬∞ W;
zone numbering increases eastward to zone 60 that covers longitude 174 to 180
East.</p>

<h4 id="st_transform-and-espg-codes">st_transform and ESPG Codes</h4>

<p>For reprojecting spatial data, the function <code class="highlighter-rouge">st_transform()</code> uses an ESPG code 
to transform a simple feature to the new CRS. EPSG Geodetic Parameter Dataset is 
a public registry of spatial reference systems, Earth ellipsoids, coordinate 
transformations and related units of measurement. The ESPG is one way to assign 
or transform the CRS in R.</p>

<p>The ESPG for UTM always begins with ‚Äú326‚Äù and the last numbers are the number of the zone.
The ESPG for WGS84 is 4326. This is the projection your equipment reads, so any trial design 
files will need to be transformed back into WGS84 before you implement the trial. Also, all 
files from your machinery, such as yield, as-applied, and as-planted, will be reported in 
latitude and longitude with WGS84.</p>

<p><strong>Dena: I feel like this is a fantastic place to have an exercise with the name and/or first few lines of a file of each
type to ask them to look at them and identify which is which and describe what that means, to check understanding?</strong></p>

<h4 id="transforming">Transforming</h4>

<p>The function <code class="highlighter-rouge">st_transform_utm()</code> transforms a simple feature into a new CRS. This function is in the functions.R script, and is described there.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundaryutm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_transform_utm</span><span class="p">(</span><span class="n">boundary</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error in st_bbox(sfobject): object 'boundary' not found
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_crs</span><span class="p">(</span><span class="n">boundaryutm</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error in st_crs(boundaryutm): object 'boundaryutm' not found
</code></pre></div></div>
<p><strong>Dena: This exercise might run well as a talk-through ‚Äì ask the room to describe their understanding of how to do the thing ‚Äì followed by a type-along where you type what they tell you to do, and then explain what worked or what didn‚Äôt?</strong></p>

<p><strong>Exercise</strong></p>
<ol>
  <li>Bring the file called ‚Äúasplanted_transformed.gpkg‚Äù <strong>Dena: add (from the data subdirectory of your WorkingDir) ?</strong>
in your environment. Name the object <code class="highlighter-rouge">planting</code>. This file contains the planting information for 2017.</li>
  <li>Identify the CRS of the object.</li>
  <li>Look at the geometry features. What kind of geometric features are in this dataset?</li>
  <li>Transform the file to UTM or Lat/Long, depending on the current CRS.</li>
</ol>

<p><strong>Solution</strong></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">planting</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_sf</span><span class="p">(</span><span class="s2">"data/asplanted_transformed.gpkg"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error: Cannot open "data/asplanted_transformed.gpkg"; The file doesn't seem to exist.
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_crs</span><span class="p">(</span><span class="n">planting</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error in st_crs(planting): object 'planting' not found
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">planting</span><span class="o">$</span><span class="n">geom</span><span class="w">
</span></code></pre></div></div>

<div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error in eval(expr, envir, enclos): object 'planting' not found
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plantingutm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_transform_utm</span><span class="p">(</span><span class="n">planting</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error in st_bbox(sfobject): object 'planting' not found
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_crs</span><span class="p">(</span><span class="n">plantingutm</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error in st_crs(plantingutm): object 'plantingutm' not found
</code></pre></div></div>

:ET