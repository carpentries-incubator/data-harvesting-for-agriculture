I"o`<h2 id="introducing-spatial-data">Introducing Spatial Data</h2>

<p>Spatial data can be stored in many different ways, and an important part of using your farm’s data will involve understanding what format your data is already in and what format another program needs it to be in. During the course of this lesson, we’ll learn:</p>

<ul>
  <li>How to identify which coordinate reference system (CRS) a data file is using</li>
  <li>How, when, and why to transform data from the WGS84 standard to the UTM standard (or vice versa)</li>
  <li>How to save the transformed data as a new file</li>
  <li>Some ways of creating visualizations from your data</li>
</ul>

<h2 id="what-is-a-crs">What is a CRS?</h2>

<p>Geospatial data has a coordinate reference system (CRS) that reports how the map is projected and what point is used as a reference. A projection is a way of making the earth’s curved surface fit into something you can represent on a flat computer screen. The point used for reference during projection is called a datum.</p>

<h2 id="importance-of-projections">Importance of Projections</h2>

<p>When you cut an orange, it’s impossible to get the peel to lay flat (without really smashing it).  The Earth, of course, behaves similarly, leading to distortion in the map.  The <em>kind</em> of distortion can be chosen by using a different projection, or mathematical scheme for converting the round Earth to a flat map.</p>

<p>To understand how much projection matters, take a look at the difference between <a href="https://en.wikipedia.org/wiki/Mercator_projection#/media/File:Mercator_projection_Square.JPG">the Mercator projection</a> of the world and the <a href="https://en.wikipedia.org/wiki/Boggs_eumorphic_projection#/media/File:Boggs_eumorphic_projection_SW.JPG">Boggs eumorphic projection</a>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Mercator</th>
      <th style="text-align: center">Boggs eumorphic projection</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Mercator_projection_Square.JPG/1024px-Mercator_projection_Square.JPG" alt="" /></td>
      <td style="text-align: center"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a3/Boggs_eumorphic_projection_SW.JPG/1280px-Boggs_eumorphic_projection_SW.JPG" alt="" /></td>
    </tr>
  </tbody>
</table>

<p>In the Mercator projection, space that doesn’t exist is created to make a “flat” map. Greenland and Antarctica wind up disproportionately huge. In the Boggs projection, strategic slices are cut out of the ocean so that the sizes appear a bit closer to true, but Canada and Russia get pinched and Greenland gets bisected. There will always be some compromises made in a projection system that converts curved surfaces to flat ones for the same reason that it’s difficult to make an orange peel lie flat. So the method you select will have an effect on your outcome.</p>

<h2 id="understanding-file-types-and-crs-types">Understanding file types and CRS types</h2>

<p>Geospatial data files have several potential variations, including:</p>

<ul>
  <li><strong>Vector or raster data</strong>: Whether the information is stored as lines and curves (vector) or as individual dots (raster or bitmap).</li>
  <li><strong>File types</strong>: Several different shape files or one unified geopackage file</li>
  <li><strong>Coordinate reference systems (CRSes)</strong>: Latitude/longitude (WGS84, measured in degrees) or UTM (measured as a distance from a fixed point in meters)</li>
</ul>

<p>Any of this information can come in any combination – you can have vector or raster data in any CRS in either a geopackage file or a collection of shape files.</p>

<p><img src="../figure/geo_spatial_figs/image24.png" width="50%" /></p>

<p>The image on the left below is a vector-based representation of GIS data, with lines and curves; the image on the right is a raster-based representation, with individual values assigned to particular locations in a grid.</p>

<p><img src="../figure/geo_spatial_figs/image27.png" width="50%" /></p>

<p>In order to make data from different sources work together, you’ll need to be able to identify what type of data in what CRS you have and how to convert them to the same type of thing—making sure you’re comparing apples to apples.</p>

<p>For example:</p>

<ul>
  <li>The data coming from your equipment will probably be in separate <strong>shape files</strong>. This allows the steering system to work with one file, the planting system to track rates in another file, and so forth. It’s like giving a group of reporters their own notebooks, instead of asking them all to share the same notebook at the same time.</li>
  <li>However, once the data has been collected, it’s easier for us to combine those reporters’ notebooks into one <code class="highlighter-rouge">geopackage</code> file so that the data is all in one place for us to work with at the same time.</li>
  <li>Data coming from your equipment will also likely be reported in a CRS based on <em>latitude/longitude (WGS84)</em>, but in order to do calculations based on distance within a field, we’ll want to convert to UTM.</li>
  <li>Because each equipment manufacturer has their own standards, there may be some additional manipulation needed to get from the manufacturer’s possibly proprietary standard to something that you can use yourself. (This is one reason it’s helpful to provide us with data before class begins, so that we can help work out the pattern for decoding your equipment manufacturer’s data before the workshop starts.)</li>
</ul>

<h2 id="loading-libraries">Loading Libraries</h2>

<p>In the beginning of this workshop, we had you all install a bunch of packages that have a collection of functions we are going to use to plot our data.  We want to tell R to load in all of these functions, and we can do that by using the <code class="highlighter-rouge">library</code> function:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="s2">"rgdal"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"plyr"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"dplyr"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"sp"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"sf"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"gstat"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"tmap"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"measurements"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"daymetr"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"FedData"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"lubridate"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"raster"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"data.table"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"broom"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"ggplot2"</span><span class="p">)</span><span class="w">

</span><span class="c1"># load functions for this workshop</span><span class="w">
</span><span class="n">source</span><span class="p">(</span><span class="s1">'https://raw.githubusercontent.com/data-carpentry-for-agriculture/trial-lesson/gh-pages/_episodes_rmd/functions.R'</span><span class="p">)</span><span class="w">

</span><span class="c1"># you need your specific working directory here with something like:</span><span class="w">
</span><span class="c1">#setwd(YOUR DIR)</span><span class="w">
</span></code></pre></div></div>
<blockquote class="callout">
  <p>This should generate a lot of output, and some of it will be warnings (in red), but that is to be expected.</p>
</blockquote>

<h2 id="reading-in-the-boundary-file">Reading in the Boundary File</h2>

<p>Before we can look at a CRS in R, we need to have a geospatial file in the R environment. We will bring in the field boundary. Use the function <code class="highlighter-rouge">read_sf()</code> to bring the dataset into your R environment. Because we have already set the working directory for this file, we don’t need to give the whole path, just the folder data that the gpkg file is stored within.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundary</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_sf</span><span class="p">(</span><span class="s2">"data/boundary.gpkg"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>There are many functions for reading files into the environment, but <code class="highlighter-rouge">read_sf()</code> creates an object of class <code class="highlighter-rouge">sf</code> (simple feature). This class makes accessing spatial data much easier. Much like a data frame, you can access variables within an <code class="highlighter-rouge">sf</code> object using the <code class="highlighter-rouge">$</code> operator. For this and other reasons like the number of spatial calculations available for <code class="highlighter-rouge">sf</code> objects, this class is perferred in most situations.</p>

<h2 id="check-the-coordinate-reference-system">Check the coordinate reference system</h2>

<p>The function for retreiving the CRS of a simple feature is <code class="highlighter-rouge">st_crs().</code> Generally it is good practice to know the CRS of your files, but it becomes critical when combining files and performing operations on geospatial data. Some commands will not work if the data is in the wrong CRS or if two dataframes are in different CRSs.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_crs</span><span class="p">(</span><span class="n">boundary</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Coordinate Reference System:
  EPSG: 4326 
  proj4string: "+proj=longlat +datum=WGS84 +no_defs"
</code></pre></div></div>

<p>The boundary file is projected in longitude and latitude using the WGS84 datum. This will be the CRS of most of the data you see.</p>

<blockquote class="callout">
  <h2 id="lost-prj-files">Lost <code class="highlighter-rouge">.prj</code> files</h2>

  <p>Sometimes when looking at a shapefile, the <code class="highlighter-rouge">.prj</code> file may be lost. Then <code class="highlighter-rouge">st_crs()</code> will return empty, but <code class="highlighter-rouge">sf</code> objects still contain a geometry column <code class="highlighter-rouge">geom</code>. We can see the geometric points for the vertices of each polygon or the points in the data.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">(</span><span class="n">boundary</span><span class="o">$</span><span class="n">geom</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Geometry set for 1 feature 
geometry type:  POLYGON
dimension:      XY
bbox:           xmin: -82.87853 ymin: 40.83945 xmax: -82.87306 ymax: 40.8466
epsg (SRID):    4326
proj4string:    +proj=longlat +datum=WGS84 +no_defs
</code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POLYGON ((-82.87319 40.84574, -82.87306 40.8398...
</code></pre></div>  </div>
</blockquote>

<h2 id="utm-zones">UTM Zones</h2>

<p>Some coordinate reference systems, such as UTM zones, are measured in meters. Latitude and longitude represent a different type of CRS, defined in terms of angles across a sphere. If we want to create measures of distance, we need the trial design in UTM. But there are many UTM zones, so we must determine the zone of the trial area.</p>

<p>The UTM system divides the surface of Earth between 80°S and 84°N latitude into 60 zones, each 6° of longitude in width. Zone 1 covers longitude 180° to 174° W; zone numbering increases eastward to zone 60 that covers longitude 174 to 180 East.</p>

<p><img src="https://earth-info.nga.mil/GandG///coordsys/images/utm_mgrs_images/utm_fig1.jpg" alt="" /></p>

<h3 id="st_transform-and-espg-codes"><code class="highlighter-rouge">st_transform</code> and ESPG Codes</h3>

<p>For reprojecting spatial data, the function <code class="highlighter-rouge">st_transform()</code> uses an ESPG code to transform a simple feature to the new CRS. The <a href="https://beta.epsg.org/home.html">ESPG Geodetic Parameter Dataset</a> is a public registry of spatial reference systems, Earth ellipsoids, coordinate transformations and related units of measurement. The ESPG is one way to assign or transform the CRS in R.</p>

<p>The ESPG for UTM always begins with “326” and the last numbers are the number of the zone. The ESPG for WGS84 is 4326. This is the projection your equipment reads, so any trial design files will need to be transformed back into WGS84 before you implement the trial. Also, all files from your machinery, such as yield, as-applied, and as-planted, will be reported in latitude and longitude with WGS84.</p>

<h2 id="transforming">Transforming</h2>

<p>The function <code class="highlighter-rouge">st_transform_utm()</code> transforms a simple feature that is in lat/long into UTM. This function is in the functions.R script, and is described there in more detail. Make sure that you have run <code class="highlighter-rouge">source("functions.R")</code> or you will not have the function in your global environment.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundaryutm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_transform_utm</span><span class="p">(</span><span class="n">boundary</span><span class="p">)</span><span class="w">
</span><span class="n">st_crs</span><span class="p">(</span><span class="n">boundaryutm</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<blockquote class="challenge">
  <h2 id="joint-exercise-exploring-geospatial-files">Joint Exercise: Exploring Geospatial Files</h2>

  <p><em>Instructors:  ask the students how to do this first, then type along with explanation.</em></p>

  <ol>
    <li>Bring the file called <code class="highlighter-rouge">"asplanted.gpkg"</code> (from the <code class="highlighter-rouge">data</code> subdirectory of your <code class="highlighter-rouge">WorkingDir</code>) in your environment. Name the object <code class="highlighter-rouge">planting</code>. This file contains the planting information for 2017.</li>
    <li>Identify the CRS of the object.</li>
    <li>Look at the geometry features. What kind of geometric features are in this dataset?</li>
    <li>Transform the file to UTM or Lat/Long, depending on the current CRS.</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">planting</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_sf</span><span class="p">(</span><span class="s2">"data/asplanted.gpkg"</span><span class="p">)</span><span class="w">
</span><span class="n">st_crs</span><span class="p">(</span><span class="n">planting</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Coordinate Reference System:
  EPSG: 4326 
  proj4string: "+proj=longlat +datum=WGS84 +no_defs"
</code></pre></div>    </div>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">planting</span><span class="o">$</span><span class="n">geom</span><span class="w">
</span></code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Geometry set for 6382 features 
geometry type:  POINT
dimension:      XY
bbox:           xmin: -82.87843 ymin: 40.83952 xmax: -82.87315 ymax: 40.84653
epsg (SRID):    4326
proj4string:    +proj=longlat +datum=WGS84 +no_defs
First 5 geometries:
</code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POINT (-82.87829 40.83953)
</code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POINT (-82.87828 40.83953)
POINT (-82.87828 40.83953)
</code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POINT (-82.87827 40.83953)
</code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POINT (-82.87825 40.83953)
</code></pre></div>    </div>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plantingutm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_transform_utm</span><span class="p">(</span><span class="n">planting</span><span class="p">)</span><span class="w">
</span><span class="n">st_crs</span><span class="p">(</span><span class="n">plantingutm</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Coordinate Reference System:
  EPSG: 32617 
  proj4string: "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs"
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<h3 id="exercise-discussion">Exercise Discussion</h3>

<p>The cleaned planting file was in WGS84 initially. When we look at the geometry features, they are 6382 points defined in xand y coordinates. Using <code class="highlighter-rouge">st_transform_utm()</code> we create a new file called <code class="highlighter-rouge">plantingutm</code> with the CRS of UTM zone 17.</p>

<h2 id="save-the-file">Save the file</h2>

<p>Use <code class="highlighter-rouge">st_write()</code> to save an sf object. If you do not specify a directory, the working directory will be used. We include the object we are saving <code class="highlighter-rouge">boundaryutm</code> and the name we would like to give the saved file <code class="highlighter-rouge">"boundary_utm.gpkg"</code>. Additionally, we specify the <code class="highlighter-rouge">layer_options</code> and <code class="highlighter-rouge">update</code> values to enable overwriting an existing file with the same name.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_write</span><span class="p">(</span><span class="n">boundaryutm</span><span class="p">,</span><span class="w"> </span><span class="s2">"boundary_utm.gpkg"</span><span class="p">,</span><span class="w"> </span><span class="n">layer_options</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'OVERWRITE=YES'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error in st_write(boundaryutm, "boundary_utm.gpkg", layer_options = "OVERWRITE=YES"): object 'boundaryutm' not found
</code></pre></div></div>

<p>The new .gpkg file will be visible in your working directory. (Check it out: Browse to your working directory in Windows File Explorer or Mac Finder and see the date and time on your new file.)</p>

<blockquote class="callout">
  <h2 id="gpkg-vs-shp-files"><code class="highlighter-rouge">.gpkg</code> vs. <code class="highlighter-rouge">.shp</code> files</h2>

  <p>You can save the file as a <code class="highlighter-rouge">.gpkg</code> or <code class="highlighter-rouge">.shp</code> file.</p>

  <p>The advantage of a <code class="highlighter-rouge">.gpkg</code> file is that you only save one file rather than four files in a shapefile. Because shapefiles contain multiple files, they can be corrupted if one piece is missing. One example is a <code class="highlighter-rouge">.prj</code> file. If the <code class="highlighter-rouge">.prj</code> file is missing, the shapefile will have no CRS, and you will need to determine the CRS of the object. You will often need to transform a file from UTM to lat/long and save the new file during trial design, so this is an important step. One common problem with these files is that when you try to open a <code class="highlighter-rouge">.gpkg</code> file for the first time in R, it might not work if you haven’t opened it in QGIS before.</p>
</blockquote>

<h2 id="visualizing-the-data">Visualizing the data</h2>

<p>There are several ways to visualize spatial data. One way is to use <code class="highlighter-rouge">plot()</code> to look at the basic shape of the data:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">boundary</span><span class="o">$</span><span class="n">geom</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../fig/rmd-plotGeomFirst-1.png" title="plot of chunk plotGeomFirst" alt="plot of chunk plotGeomFirst" width="612" style="display: block; margin: auto;" /></p>

<h2 id="data-types">Data Types</h2>

<p>There are many different geospatial data file types in use, which can make processing a bit complicated.  We have stuck to using <code class="highlighter-rouge">gpkg</code> in our work here because we feel there are fewer ways for the data to get corrupted (as by a lost <code class="highlighter-rouge">shp</code> file, for instance).  Some other types you may see include:</p>

<ul>
  <li>
    <p><a href="https://en.wikipedia.org/wiki/Shapefile"><code class="highlighter-rouge">shp</code></a>.  Mentioned a moment ago as having several files to track, the <code class="highlighter-rouge">shp</code> format generates some required files and some optional files.</p>

    <p>Required files include:</p>

    <ul>
      <li><code class="highlighter-rouge">shp</code>, the geometry itself</li>
      <li><code class="highlighter-rouge">shx</code>, the shape index file</li>
      <li><code class="highlighter-rouge">sbf</code>, the attribute formats for each shape</li>
    </ul>

    <p>Optional files which may be included are:</p>

    <ul>
      <li><code class="highlighter-rouge">cpg</code>, the code page (or encoding) used with the <code class="highlighter-rouge">dbf</code> file</li>
      <li><code class="highlighter-rouge">prj</code>, the project description and CRS</li>
      <li><code class="highlighter-rouge">sbn</code>, <code class="highlighter-rouge">sbx</code>, spatial indices of features</li>
    </ul>
  </li>
  <li>
    <p><a href="https://en.wikipedia.org/wiki/GeoJSON"><code class="highlighter-rouge">geojson</code></a>.  This is a plain text format which is quite flexible.</p>
  </li>
  <li>
    <p><a href="https://en.wikipedia.org/wiki/GeoTIFF"><code class="highlighter-rouge">tif</code></a>.  This is a graphics file format which has been adapted for storing coordinate reference data with raster images.</p>
  </li>
</ul>
:ET