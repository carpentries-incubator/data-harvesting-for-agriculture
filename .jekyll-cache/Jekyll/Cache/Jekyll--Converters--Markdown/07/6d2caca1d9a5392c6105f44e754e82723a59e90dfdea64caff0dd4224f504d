I"E<!-- JPN: updated fig path here manually for plots to show -->

<h2 id="assumptions----for-debuggingspan"><font color="magenta">Assumptions -- FOR DEBUGGING&lt;/span&gt;</font></h2>

<ol>
  <li>
    <font color="magenta">Everybody has installed R and R studio&lt;/span&gt;
</font>
  </li>
  <li>
    <font color="magenta">They have been able to run the install script we sent them and have all packages installed&lt;/span&gt;
</font>
  </li>
  <li>
    <font color="magenta">They *do* need an intro to the layout of RStudio, and what everything does.&lt;/span&gt;

</font>
  </li>
</ol>
<h2 id="getting-to-know-r-and-rstudio">Getting to know R and RStudio</h2>

<font color="magenta">A good bit of this might be more suitable to the Setup section as it's got a lot about the setup and running of Rstudio.&lt;/span&gt;

### <font color="magenta">Outline for this section&lt;/span&gt;
 1. <font color="magenta">Let's open RStudio &lt;/span&gt;
 1. <font color="magenta">Where is the console? (screen shot) Vocab: *console*&lt;/span&gt;
 1. <font color="magenta">Let's use RStudio as a calculator by putting numbers into the console&lt;/span&gt;


In this episode we’ll cover the basics of using R, which is a programming language for statistics, data analysis, and data visualization. In the past decade or so, R has become very popular in both science and business, largely because (1) it is free, and (2) thousands of people have written new code extending its functionality, and that code is also free. If you perform an analysis in R, you can share that analysis so that anyone in the world can reproduce it without having to purchase proprietary software.

If you’re already proficient with Excel, you will probably already know how to accomplish a lot of what we are doing in this episode using Excel instead of R. One reason why we are teaching you this material, however, is to get you comfortable with R since we will be using R for geospatial analysis (which is not so easy in Excel). 

In this lesson, we will be making use of another software called "RStudio" as a way to interact with the programming language R.  RStudio makes writing our programs more user-friendly.  **Some sort of analogy here would be grand**

We launch RStudio by double clicking on it's icon, as we would with other software on our computers.  If this is the first time you have opened it, the entire left pane will be taken up by something called the `Console` that you can see as the left hand panel in the figure below:


![stuff](../fig/Rstudio_blank.png)

<font color="magenta">Do we want a screen shot of this instead of the R code?  Or will this be enough of a "following along" type of thing that that sort of thing isn't necessary?&lt;/span&gt;

This has a prompt where commands can be entered.


```r
5 + 7
```

```
## [1] 12
```

<!-- JPN: here is a test plot you can uncomment if you wanna try it
I'm gonna trya thing


```r
plot(c(1,2,3), c(4,5,6))
```

![plot of chunk unnamed-chunk-2](../figure/unnamed-chunk-2-1.png)
-->


<!-- JPN: this is just a test to see if I get what is going on here

```r
data = read.csv('data/fertilizer_use.csv')
print(head(data))
```

```
##   Year Crop Nitrogen Phosphate Potash
## 1 1964 Corn     1623      1053    829
## 2 1965 Corn     2151      1336   1204
## 3 1966 Corn     2596      1626   1513
## 4 1967 Corn     3044      1857   1750
## 5 1968 Corn     3116      1855   1778
## 6 1969 Corn     3287      1789   1765
```
-->

After you hit enter, you will see the result of the command.  Let's try a few others:


```r
# Performing arithmetic
6 + 2
```

```
## [1] 8
```

Whoa!  What did I do just there with this `#`?  This is called "leaving a comment in your code" and everything following the `#`
symbol is called a *comment*. A
comment is a line, or part of a line, that is ignored by R.  This means you can
use comments to explain what is happening in the code or why you did something
a certain way.  Comments start with the `#` character, and can take up the
whole line or just the end of a line.  As we go through this workshop, I
encourage you to put lots of comments in your code. Think of them as a way to
take notes!  Here is an example of a comment at the end of a line while we are doing some arithematic:


```r
2 ^ 3 # this raises two to the third power
```

```
## [1] 8
```



## Variables in R

### <font color="magenta">Outline of this Section&lt;/span&gt;

 1. <font color="magenta">what is a variable? Vocab: *variable*&lt;/span&gt;
 1. <font color="magenta">how do we assign a variable? Vocab: *assign*&lt;/span&gt;
 1. <font color="magenta">What can we do with this variable? -&gt; Generic manipulations (addition, multiplication, etc)&lt;/span&gt;
     * <font color="magenta">for this, use a "real world" thing that farmers might be into... something something nitrogen levels?&lt;/span&gt;
 1. <font color="magenta">Talk about how this variable now shows up in the data area and have a screen shot of where that is&lt;/span&gt;


<font color="magenta">I stole this bit from the Python Fundementals Episode, not sure if that is groovy or not.  I *think* its ok if we follow the rules of their license but we should double check. I also stole a few things from the R-fundementals workshop and so we need to credit them as well.&lt;/span&gt;

<font color="magenta">Also I've left in the links to glossary references that may or may not be there - for example if you click on the "assign" link, it goes nowhere right now.&lt;/span&gt;

<font color="magenta">Also, we should change this whole `weight_kg` thing into something that is more agri-centric?  I think?&lt;/span&gt;

This is great but not very interesting.
To do anything useful with data, we need to assign its value to a _variable_.
In R, we can [assign](../reference/#assign) a value to a
[variable](../reference/#variable), by typing a little left arrow sign `&lt;-`.
For example, to assign value `60` to a variable `weight_kg`, we would execute:


```r
weight_kg &lt;- 60
```

From now on, whenever we use `weight_kg`, R will substitute the value we assigned to
it. In layman's terms, **a variable is a name for a value**.

In R, variable names:

 - can include letters, digits, and underscores
 - cannot start with a digit
 - are [case sensitive](../reference/#case-sensitive).

This means that, for example:
 - `weight0` is a valid variable name, whereas `0weight` is not
 - `weight` and `Weight` are different variables

<font color="magenta">Also from the R-programming workshop, possibly said another way:&lt;/span&gt;

&gt; ## Variable Naming Conventions
&gt;
&gt; Historically, R programmers have used a variety of conventions for naming variables. The `.` character
&gt; in R can be a valid part of a variable name; thus the above assignment could have easily been `weight.kg &lt;- 57.5`.
&gt; This is often confusing to R newcomers who have programmed in languages where `.` has a more significant meaning.
&gt; Today, most R programmers 1) start variable names with lower case letters, 2) separate words in variable names with
&gt; underscores, and 3) use only lowercase letters, underscores, and numbers in variable names. The book *R Packages* includes
&gt; a [chapter](http://r-pkgs.had.co.nz/style.html) on this and other style considerations.
{: .callout}

### Types of data

<font color="magenta">Do we need to get into datatypes here?  Or can we just skip it and get into it when we look at an actual dataset that has columns of different datatypes?&lt;/span&gt;

R knows various types of data. The ones you are likely to come across are:

* integer numbers (whole numbers)
* floating point numbers (numbers with decimals), and
* names or words that sort data into "categories" <font color="magenta">(maybe something better here?)  Save types of data until we get into the columns stuff?&lt;/span&gt;

In the example above, variable `weight_kg` has an integer value of `60`.
To create a variable with a floating point value, we can execute:


```r
weight_kg &lt;- 60.0
```

<font color="magenta">Here I don't know if we should get into the print function right now like they do in the Python lesson or not&lt;/span&gt;

<font color="magenta">I also don't know if we want to use "&lt;-" all the time or the "=" sign.  I *feel* like "=" is more intiuative but I'm not 100% sure on that one, could be my Python bias showing :)&lt;/span&gt;

We can do arithematic with variables like we did with numbers before:


```r
# Performing arithmetic with our variable: multiply it by a factor of 2.2
weight_kg * 2.2
```

```
## [1] 132
```
<!-- weight in lbs = 2.2 x weight in kg -->


The above command, however, did not change the value of `weight_kg`:


```r
weight_kg
```

```
## [1] 60
```

To change the value of the `weight_kg` variable, we have to
**assign** `weight_kg` a new value using the equals `&lt;-` sign:


```r
weight_kg &lt;- 60.0 * 2.2
weight_kg
```

```
## [1] 132
```


&gt; ## Variables as Sticky Notes
&gt;
&gt; A variable is analogous to a sticky note with a name written on it:
&gt; assigning a value to a variable is like putting that sticky note on a particular value.
&gt;
&gt; ![Variables as Sticky Notes](../fig/python-sticky-note-variables-01.svg)
&gt;
&gt; This means that assigning a value to one variable does **not** change
&gt; values of other variables.
&gt; For example, let's store the subject's weight in pounds in its own variable:
&gt;
&gt; 
&gt; ```r
&gt; # There are 2.2 pounds per kilogram
&gt; weight_lb &lt;- 2.2 * weight_kg
&gt; weight_kg
&gt; ```
&gt; 
&gt; ```
&gt; ## [1] 132
&gt; ```
&gt; 
&gt; ```r
&gt; weight_lb
&gt; ```
&gt; 
&gt; ```
&gt; ## [1] 290.4
&gt; ```
&gt;
&gt;
&gt; ![Creating Another Variable](../fig/python-sticky-note-variables-02.svg)
&gt;
&gt; Let's now change `weight_kg`:
&gt;
&gt; 
&gt; ```r
&gt; weight_kg &lt;- 100.0
&gt; weight_kg
&gt; ```
&gt; 
&gt; ```
&gt; ## [1] 100
&gt; ```
&gt; 
&gt; ```r
&gt; weight_lb
&gt; ```
&gt; 
&gt; ```
&gt; ## [1] 290.4
&gt; ```
&gt; We can see that even though we updated `weight_kg`, the variable `weight_lb` was not changed.
&gt;
&gt; ![Updating a Variable](../fig/python-sticky-note-variables-03.svg)
&gt;
&gt; Since `weight_lb` doesn't "remember" where its value comes from,
&gt; it is not updated when we change `weight_kg`.
{: .callout}


<font color="magenta">Note: there is another way of explaining this in the R lesson - [http://swcarpentry.github.io/r-novice-inflammation/01-starting-with-data/index.html](http://swcarpentry.github.io/r-novice-inflammation/01-starting-with-data/index.html)&lt;/span&gt;

<font color="magenta">Do we want to have this example for them too or just get right into scripts and whatnot?&lt;/span&gt;

&gt; ## Assigning Values to Variables
&gt;
&gt; Draw diagrams showing what variables refer to what values after each statement in the following program:
&gt;
&gt; ~~~
&gt; mass &lt;- 47.5
&gt; age &lt;- 122
&gt; mass &lt;- mass * 2.0
&gt; age &lt;- age - 20
&gt; ~~~
&gt; {: .language-r}
&gt;
&gt; &gt; ## Solution
&gt; &gt;
&gt; &gt; ~~~
&gt; &gt; mass &lt;- 47.5
&gt; &gt; age &lt;- 122
&gt; &gt; ~~~
&gt; &gt; {: .language-r}
&gt; &gt; 
&gt; &gt; <img src="../fig/mass-age-assign-1.svg" alt="Assigning Variables" />
&gt; &gt;
&gt; &gt; ~~~
&gt; &gt; mass &lt;- mass * 2.0
&gt; &gt; age &lt;- age - 20
&gt; &gt; ~~~
&gt; &gt; {: .language-r}
&gt; &gt; 
&gt; &gt; <img src="../fig/mass-age-assign-2.svg" alt="Assigning Variables" />
&gt; &gt; 
&gt; {: .solution}
{: .challenge}


## Writing and Savings R Scripts

<font color="magenta">NOTE: I'm wondering if we want to push this section to later -- i.e. if we want to just go right to "getting your data into R" and do some examples just using the console and then start worrying about saving files later in the day once they have some cool plots that they made with R that they might want to reproduce.</font>


### <font color="magenta">Outline of this section&lt;/span&gt;
 1. <font color="magenta">Analogy - scripting is like writing a set of instructions, a letter, something. Vocab: *scripts/scripting* &lt;/span&gt;
 1. <font color="magenta">Where do we write scripts in RStudio - screen shot of window, a screen shot of what to do if there is only the console and no script - how do you open a script interface &lt;/span&gt;
 1. <font color="magenta">Redo stuff with variable in script (nitrogen levels calculation), but call it something different&lt;/span&gt;
 1. <font color="magenta">How to run a script - Run vs. Source -&gt; they are in the same place!  Screenshot of this. Vocab: *running a script*&lt;/span&gt;
 1. <font color="magenta">Point out that it shows up in the data-listing place&lt;/span&gt;
 1. <font color="magenta">~~How do we find out the value of our new variable that we wrote in a script?~~&lt;/span&gt;
    1. <font color="magenta">~~Using the console like before - because in RStudio the console and scripting interface are linked! (this is not true in other things like PyCharm... this is slightly an aside though so use an aside thing)~~&lt;/span&gt;
    1. <font color="magenta">~~Using a print statement - emphasize that you *have* to use print in the script to see the variable!~~&lt;/span&gt;
 1. <font color="magenta">How to save our script -&gt; where does it save to?&lt;/span&gt;
 1. <font color="magenta">Closing and re-opening a script to re-run.&lt;/span&gt;


Now that we have some idea of what kinds of calculations we want to do in R, we might want to know how to save our work.  We do this in something called a _script_ which is essentially a list of instructions that will tell R what to do, in the order we give them.

We can open up a _script file_ where we will type in all our instructions by going to the little green plus at the top left of RStudio and selecting "R Script" from the dropdown menu <font color="magenta">(this was for a Mac, not sure if its different for windows)&lt;/span&gt;:

<img src="../fig/opening_script_in_Rstudio.png" alt="Opening a script in Rstudio" />

In our new scripting window, we can type the commands that we had worked through before into this script and then tell R to do the calculation by putting our cursor on the last line (end of line 3) and pressing the "Run" button in the upper right corner of the scripting window:

<img src="../fig/output_script_save-02.png" alt="Run a script" />

<font color="magenta">Do we want to teach them about Source vs. Run at this point? &lt;/span&gt;

You can see that these variable names have now popped up in the _Global Environment_ window at the upper left -- this is a way we can keep track of our variables as we run our scripts.

Finally, we want to be able to save all of our hard work!  We can do this like we would save any file on our computer, but make sure you put it in a place were you'll remember on your computer
<font color="magenta">(do we need screen shots?  I assume everybody knows how to save a file and how to choose where to save it but maybe this isn't 100% correct?)&lt;/span&gt;.

You'll note now that the little upper tab on the left of the scripting window has the file name I chose, but with the extension `.R`.  This is the extension of an R-script and it means that its in a format that R can execute.

<img src="../fig/output_script_save-03.png" alt="save a script" />

If you close this file and want to re-open it, you can use `File -&gt; Open File...` to open it up in R. <font color="magenta">(This could be different on a Windows, also not sure how much detail we want here and if we want a screen shot or not)&lt;/span&gt;


## OPTIONAL: What is a function?

<font color="magenta">Not 100% sure we want to go into this much detail, but we could do a thing here where we put everything we just did with our variable into a function.  I think this might be too much at this point, and maybe if we get them into writing their own functions we can circle back around to this.&lt;/span&gt;

## Getting your data into R

 1. Let's talk about the dataset we are going to use here -- facts about this dataset
 1. This is what this dataset looks like (show snapshot of csv)
 1. To get this data into R where we can do math to it like we did with our variable above we have to do something called "reading in our data".  To do this, we'll use something called a *function* to assign a variable the value of this table -- i.e. we want a variable that will store all the rows and columns of our dataset
     * Talk a bit about what a function is here -- omelets? Vocab: *function*
     * we also have to talk about the fact that we give the file name as a parameter to this function. Vocab: *function parameter*

### Explore your data in R (could be part of previous or own thing, not sure)

 1. Another function example: using `str()` to look at your data real quick
 1. Also show how to look at your data in R (like "View(data)")? Maybe?  Or you can click on it?


## Doing stuff with data in R (better name obvs)

 1. Your data is stored as a special thing called a dataframe - explain what this is. Vocab: *dataframe*
 1. We can access the columns of your tabular dataset with a $ thing
 1. We can access the rows of your tabular dataset with ... (not sure we wanna do this)
 1. We can manipulate columns with functions
    * example: min function (or something)
    * How to learn about functions you might want to use? --&gt; teach googling &amp; how to look up info about functions in R




</font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font>
:ET