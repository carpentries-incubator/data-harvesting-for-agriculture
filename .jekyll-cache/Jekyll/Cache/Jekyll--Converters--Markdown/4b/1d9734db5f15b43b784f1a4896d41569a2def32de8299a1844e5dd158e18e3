I"zr<p>####Motivating Questions:</p>
<ul>
  <li>What are the common file types in agricultural data?</li>
  <li>What publicly available datasets exist for my field?</li>
</ul>

<p>####Objectives with Agricultural Data Types</p>
<ul>
  <li>Describe the format of public weather and soil datasets</li>
  <li>Import weather data from the internet, eg. daymetr</li>
  <li>Access to elevation and ssurgo data with higher resolution</li>
  <li>Derive topography data from elevation data</li>
</ul>

<p>####Keypoints:</p>
<ul>
  <li>sf is prefereable for data analysis; it is easier to access the dataframe</li>
  <li>Projecting your data in utm is necessary for many of the geometric operations you perform
(e.g. making trial grids and splitting plots into subplot data)</li>
  <li>Compare different data formats, such as gpkg, shp(cpg,dbf,prj,sbn,sbx),geojson,tif</li>
</ul>

<blockquote class="callout">
  <h1 id="daymet-weather-data">Daymet Weather Data</h1>

  <p>The Oak Ridge National Laboratory produces a datset called Daymet which contains predicted
weather observations on a one meter grid. These data come from weather station climate 
observations in a climate model for prediction and include variables such as precipitation,
snow water equivalent, temperature, day length, solar radians, and vapor pressure.</p>

  <p>There is a package in r <code class="highlighter-rouge">daymetr</code> that downloads the daymet weather data within the R environment.
For a single point, you can use the command <code class="highlighter-rouge">download_daymet()</code>. If you want to download the data 
for a set of points, there is also the command <code class="highlighter-rouge">download_daymet_batch()</code> which takes an argument 
a .csv of the points in lat/long.</p>

</blockquote>

<blockquote class="callout">
  <h1 id="using-daymetr-to-download-weather">Using daymetr to download weather</h1>
  <p>We will use the mean latitude and longitude values from the bounding box as our point for the 
weather data. The functions <code class="highlighter-rouge">cent_long()</code> and <code class="highlighter-rouge">cent_lat()</code> give the mean longitude and latitude points of the bounding box around the <code class="highlighter-rouge">sf</code> object that is supplied. This should be a point near the middle of the field.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundary</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_sf</span><span class="p">(</span><span class="s2">"data/boundary.gpkg"</span><span class="p">)</span><span class="w">
</span><span class="n">lon</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cent_long</span><span class="p">(</span><span class="n">boundary</span><span class="p">)</span><span class="w">
</span><span class="n">lat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cent_lat</span><span class="p">(</span><span class="n">boundary</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <p>We also call the site <code class="highlighter-rouge">Field1</code>, but this can be the name of one of your fields if you use it in the future.
We can choose the start and end years. If the data is not available for the year you request, an 
error will be reported. We choose 2000 to 2018 for this example; later we will use the
historical data for comparison. The final option <code class="highlighter-rouge">internal = TRUE</code> means that the daymet 
data is brought into the R environment rather than saved in your working directory.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weather</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">download_daymet</span><span class="p">(</span><span class="n">site</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Field1"</span><span class="p">,</span><span class="w"> </span><span class="n">lat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="n">lon</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lon</span><span class="p">,</span><span class="w"> </span><span class="n">start</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2000</span><span class="p">,</span><span class="w"> </span><span class="n">end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2018</span><span class="p">,</span><span class="w"> </span><span class="n">internal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Downloading DAYMET data for: Field1 at 41.7430279883331/-81.9757922217347 latitude/longitude !
</code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Done !
</code></pre></div>  </div>
</blockquote>

<blockquote>
  <h1 id="exploring-the-daymet-data">Exploring the daymet data</h1>
  <p>We can use <code class="highlighter-rouge">str()</code> as we did in the last lesson to explore the new datmetr object <code class="highlighter-rouge">weather</code></p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">str</span><span class="p">(</span><span class="n">weather</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## List of 7
##  $ site     : chr "Field1"
##  $ tile     : num 11750
##  $ latitude : num 41.7
##  $ longitude: num -82
##  $ altitude : num 172
##  $ tile     : num 11750
##  $ data     :'data.frame':	6935 obs. of  9 variables:
##   ..$ year         : num [1:6935] 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...
##   ..$ yday         : num [1:6935] 1 2 3 4 5 6 7 8 9 10 ...
##   ..$ dayl..s.     : num [1:6935] 32486 32486 32486 32486 32832 ...
##   ..$ prcp..mm.day.: num [1:6935] 0 1 13 6 2 0 0 0 0 4 ...
##   ..$ srad..W.m.2. : num [1:6935] 250 224 176 189 160 ...
##   ..$ swe..kg.m.2. : num [1:6935] 20 16 12 12 8 8 8 4 4 0 ...
##   ..$ tmax..deg.c. : num [1:6935] 9.5 14.5 12.5 12 1.5 3.5 3.5 6 7 9.5 ...
##   ..$ tmin..deg.c. : num [1:6935] -2.5 4.5 2 -0.5 -4 -2 -2.5 -4 2 4 ...
##   ..$ vp..Pa.      : num [1:6935] 520 840 720 600 440 520 520 440 720 800 ...
##  - attr(*, "class")= chr "daymetr"
</code></pre></div>  </div>
  <p>The object <code class="highlighter-rouge">weather</code> is a list of 7 objects, the last of which is the data. In the next excerise we will explore what variables are in this dataframe.</p>
</blockquote>

<blockquote class="challenge">
  <h1 id="exercise-1-explore-the-weather-data">Exercise 1: Explore the weather data</h1>

  <ol>
    <li>Grab this object and save it as <code class="highlighter-rouge">weather_data</code>.</li>
    <li>How is the date reported?</li>
    <li>What other variables exist?</li>
    <li>What are the units for the different variables?
 *Remember: Sometimes you need to use a search engine to understand what objects
 are created from a specific R function.</li>
  </ol>

  <blockquote class="solution">
    <p>#Solution</p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weather_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">weather</span><span class="o">$</span><span class="n">data</span><span class="w">
</span><span class="n">str</span><span class="p">(</span><span class="n">weather_data</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 'data.frame':	6935 obs. of  9 variables:
##  $ year         : num  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...
##  $ yday         : num  1 2 3 4 5 6 7 8 9 10 ...
##  $ dayl..s.     : num  32486 32486 32486 32486 32832 ...
##  $ prcp..mm.day.: num  0 1 13 6 2 0 0 0 0 4 ...
##  $ srad..W.m.2. : num  250 224 176 189 160 ...
##  $ swe..kg.m.2. : num  20 16 12 12 8 8 8 4 4 0 ...
##  $ tmax..deg.c. : num  9.5 14.5 12.5 12 1.5 3.5 3.5 6 7 9.5 ...
##  $ tmin..deg.c. : num  -2.5 4.5 2 -0.5 -4 -2 -2.5 -4 2 4 ...
##  $ vp..Pa.      : num  520 840 720 600 440 520 520 440 720 800 ...
</code></pre></div>    </div>
    <p>The date is reported as the year and day of the year. 
Other variables include day length,
precipitation, solar radiation, snow water equivalent, maximum temperature, minimum
temperature, and vapor pressure. 
The units for the variables are given after the variable 
name. For example, day length is in seconds and solar radiation is in watts per square meter.
While precipitation and temperature have intuitive names, vapor pressure and snow water
equivalent are not so apparent. 
Use the <code class="highlighter-rouge">daymetr</code> <a href="https://cran.r-project.org/web/packages/daymetr/vignettes/daymetr-vignette.html">vignette</a> to understand the meaning of these variables.</p>

  </blockquote>
</blockquote>

<blockquote class="callout">
  <p>#Dates in Dataframes</p>

  <p>There is a class within R for dates. Once a column is of the <code class="highlighter-rouge">date</code> class, we can subset
or order the dataset by time. <code class="highlighter-rouge">as.Date()</code> converts a column to a data, but here if we try 
the command <code class="highlighter-rouge">weather_data$date &lt;- as.Date(weather_data$yday)</code>, we will receive an error 
saying an origin must be supplied.</p>

  <p>The function can see that the date is in days after some starting time or origin. The name
<code class="highlighter-rouge">yday</code> means this is the day of the year, so the origin should be the last day of the 
previous year. There are multiple years in our dataframe, so the origin should change 
for each year. This is accomplished in the function as.Date.daymetr(). To see this code and understand how &gt; it works go to the <a href="https://github.com/data-carpentry-for-agriculture/trial-lesson/blob/gh-pages/_episodes_rmd/functions.R">functions script</a> in github.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weather_data</span><span class="o">$</span><span class="n">date</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.Date.daymetr</span><span class="p">(</span><span class="n">weather_data</span><span class="p">)</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">date</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "2000-01-01" "2000-01-02" "2000-01-03" "2000-01-04" "2000-01-05"
## [6] "2000-01-06"
</code></pre></div>  </div>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">class</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">date</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "Date"
</code></pre></div>  </div>
</blockquote>

<blockquote>
  <p>#Unit Conversions</p>

  <p>Publicly available data are usually given in metric units as we saw in the weather data 
above. We may want to have these data in imperial units as these are the units we are using
to think about yield and other values in the United States. You may know the value of crop requirements and threshholds in imperial units rather than metric units. For example, a goal of 18 inches of rain during the corn season.</p>

  <p>The package <code class="highlighter-rouge">measurements</code> is used for converting different types of measurements from one unit to another. The 
command <code class="highlighter-rouge">conv_unit()</code> converts the column from one stated unit to another unit.
Another useful function in the package is <code class="highlighter-rouge">conv_unit_options</code> which gives the possible units for a specific kind of measure (e.g. length, area, weight, etc.).</p>

  <p>We have made simple functions for converting units within <code class="highlighter-rouge">conv_unit()</code>. For example, the function <code class="highlighter-rouge">mm_to_in()</code> can convert the daily precipitation from milimeters to inches. The following lines converts <code class="highlighter-rouge">prcp..mm.day.</code> to inches and creates a new column called <code class="highlighter-rouge">prec</code>.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weather_data</span><span class="o">$</span><span class="n">prec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mm_to_in</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">prcp..mm.day.</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>
</blockquote>

<blockquote class="challenge">
  <p>Exercise 2: Unit Conversions</p>

  <ol>
    <li>Convert the two temperature variables into fahrenheit from celsius using the function <code class="highlighter-rouge">c_to_f()</code> with the names <code class="highlighter-rouge">tmax</code> and <code class="highlighter-rouge">tmin</code>.</li>
    <li>What is the maximum temperature recorded?</li>
  </ol>

  <blockquote class="solution">
    <p>Exercise 2 Solutions</p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weather_data</span><span class="o">$</span><span class="n">tmax</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">c_to_f</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">tmax..deg.c.</span><span class="p">)</span><span class="w">
</span><span class="n">weather_data</span><span class="o">$</span><span class="n">tmin</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">c_to_f</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">tmin..deg.c.</span><span class="p">)</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">tmax</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 49.1 58.1 54.5 53.6 34.7 38.3
</code></pre></div>    </div>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">max</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">tmax</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 94.1
</code></pre></div>    </div>
    <p>The maximum temperature during this time period was 94 degrees.</p>
  </blockquote>
</blockquote>

<blockquote>
  <p>#Precipitation Graph</p>

  <p>Perhaps you want to see what the weather this year was like compared to the typical year.
We are going make a graph showing the total monthly precipitation from
2018 compared to the average precipitation from the years 2000 to 2017. This is a common way
to look at seasonal rainfall and allows us to look at the rainfall during the critical months
of July and August. First, we need to organize the data in a new dataset with the average total rainfall for each month.</p>
</blockquote>

<blockquote>
  <h1 id="adding-a-month-variable">Adding a month variable</h1>

  <p>Currently, there is no month variable in our dataframe. There is a package called <code class="highlighter-rouge">lubridate</code>
that can facilitate easy transformations of dates in R. We use the command <code class="highlighter-rouge">month()</code> to add a 
variable called <code class="highlighter-rouge">month</code> to the dataframe. The option <code class="highlighter-rouge">label = TRUE</code> creates a string with the 
month name instead of a number.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weather_data</span><span class="o">$</span><span class="n">month</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lubridate</span><span class="o">::</span><span class="n">month</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">date</span><span class="p">,</span><span class="w"> </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">month</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] Jan Jan Jan Jan Jan Jan
## 12 Levels: Jan &lt; Feb &lt; Mar &lt; Apr &lt; May &lt; Jun &lt; Jul &lt; Aug &lt; Sep &lt; ... &lt; Dec
</code></pre></div>  </div>
</blockquote>

<blockquote>
  <h1 id="taking-sum-or-average-by-groups">Taking sum or average by groups</h1>

  <p>Now, we need to sum the daily precipitation for each year and month combination. There is a 
package called <code class="highlighter-rouge">dplyr</code> that helps with many kinds of data manipulation. A popular task is to 
perform an action over a group, like taking the sum of something. To specify the grouping variables, you use <code class="highlighter-rouge">group_by()</code> then add the additional
command <code class="highlighter-rouge">summarise()</code> which defines the action. For this exercise we wrote functions that use <code class="highlighter-rouge">dplyr</code> to make the task simpler for you 
<code class="highlighter-rouge">sumprec_by_monthyear()</code> and <code class="highlighter-rouge">avgprec_by_month()</code>.</p>

  <p>First we use the command to calculate the total precipitation for each month in each year.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">by_month_year</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sumprec_by_monthyear</span><span class="p">(</span><span class="n">weather_data</span><span class="p">)</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">by_month_year</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## # A tibble: 6 x 3
## # Groups:   month [1]
##   month  year prec_month
##   &lt;ord&gt; &lt;dbl&gt;      &lt;dbl&gt;
## 1 Jan    2000       1.97
## 2 Jan    2001       1.18
## 3 Jan    2002       2.52
## 4 Jan    2003       1.10
## 5 Jan    2004       2.76
## 6 Jan    2005       4.06
</code></pre></div>  </div>

  <p>Now we have a dataframe with the rainfall for each month of each year, where the first rows of the dataframe are for January.</p>

</blockquote>

<blockquote>
  <p>#Subsetting the data</p>

  <p>Now we want to separate the 2018 data from the rest of the years 
before we take the average monthly precipitation. We will take the &gt; subset of <code class="highlighter-rouge">by_month_year</code> that is in 2018.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monthprec_2018</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">subset</span><span class="p">(</span><span class="n">by_month_year</span><span class="p">,</span><span class="w"> </span><span class="n">year</span><span class="o">==</span><span class="m">2018</span><span class="p">)</span><span class="w"> 
</span></code></pre></div>  </div>
</blockquote>

<blockquote class="challenge">
  <h1 id="exercise-3-subsetting">Exercise 3: Subsetting</h1>

  <p>Name the subset of <code class="highlighter-rouge">by_month_year</code> that is not in 2018  monthprec_hist, find the total precipitation in June of 2015.</p>

  <blockquote class="solution">
    <h1 id="exercise-3-solution">Exercise 3 Solution</h1>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">subset</span><span class="p">(</span><span class="n">by_month_year</span><span class="p">,</span><span class="w"> </span><span class="n">year</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="m">2018</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## # A tibble: 216 x 3
## # Groups:   month [12]
##    month  year prec_month
##    &lt;ord&gt; &lt;dbl&gt;      &lt;dbl&gt;
##  1 Jan    2000       1.97
##  2 Jan    2001       1.18
##  3 Jan    2002       2.52
##  4 Jan    2003       1.10
##  5 Jan    2004       2.76
##  6 Jan    2005       4.06
##  7 Jan    2006       2.72
##  8 Jan    2007       5   
##  9 Jan    2008       2.95
## 10 Jan    2009       2.72
## # … with 206 more rows
</code></pre></div>    </div>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">subset</span><span class="p">(</span><span class="n">by_month_year</span><span class="p">,</span><span class="w"> </span><span class="n">year</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2015</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## # A tibble: 12 x 3
## # Groups:   month [12]
##    month  year prec_month
##    &lt;ord&gt; &lt;dbl&gt;      &lt;dbl&gt;
##  1 Jan    2015       5.59
##  2 Feb    2015       4.29
##  3 Mar    2015       1.18
##  4 Apr    2015       4.57
##  5 May    2015       4.65
##  6 Jun    2015       7.91
##  7 Jul    2015      10.5 
##  8 Aug    2015       5.35
##  9 Sep    2015       3.78
## 10 Oct    2015       3.07
## 11 Nov    2015       2.48
## 12 Dec    2015       2.17
</code></pre></div>    </div>
    <p>We see that the monthly rainfall in June was 7.91 inches. We could also find this by taking a subset with the year and month.</p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">subset</span><span class="p">(</span><span class="n">by_month_year</span><span class="p">,</span><span class="w"> </span><span class="n">year</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2015</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">month</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"Jun"</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## # A tibble: 1 x 3
## # Groups:   month [1]
##   month  year prec_month
##   &lt;ord&gt; &lt;dbl&gt;      &lt;dbl&gt;
## 1 Jun    2015       7.91
</code></pre></div>    </div>

  </blockquote>
</blockquote>

<blockquote>
  <p>#Take the average of monthly rainfall</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monthprec_hist</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">avgprec_by_month</span><span class="p">(</span><span class="n">subset</span><span class="p">(</span><span class="n">by_month_year</span><span class="p">,</span><span class="w"> </span><span class="n">year</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="m">2018</span><span class="p">))</span><span class="w">
</span></code></pre></div>  </div>
</blockquote>

<blockquote>
  <p>#Merging</p>

  <p>We now have two separate dataframes <code class="highlighter-rouge">by_month_2018</code> and <code class="highlighter-rouge">by_month</code>
with the rainfall for each
month. We can use the common variable <code class="highlighter-rouge">month</code> to merge them into
one dataframe with the average
monthly rainfall and the 2018 monthly rainfall using the <code class="highlighter-rouge">merge()</code>
function.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prec_plot</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">merge</span><span class="p">(</span><span class="n">monthprec_hist</span><span class="p">,</span><span class="w"> </span><span class="n">monthprec_2018</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"month"</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>
</blockquote>

<blockquote>
  <h1 id="making-the-graph">Making the graph</h1>

  <p>We will now use <code class="highlighter-rouge">ggplot</code> to create a graph with a bar representing
the monthly precipitation 
in 2018 and a point with the average rainfall from 2000 to 2017. In &gt; the function <code class="highlighter-rouge">geom_bar()</code> <code class="highlighter-rouge">stat = identity</code> creates a bar graph 
where the height of the bar is the value of the 
variable rather than the count of the observations, the common use &gt; of a bar chart.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monthly_prec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">prec_plot</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">month</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prec_month</span><span class="p">),</span><span class="w"> </span><span class="n">stat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'identity'</span><span class="p">)</span><span class="w"> 
</span><span class="n">monthly_prec</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">month</span><span class="p">,</span><span class="w"> </span><span class="n">prec_avg</span><span class="p">),</span><span class="w"> </span><span class="n">show.legend</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ggtitle</span><span class="p">(</span><span class="s2">"Field 1"</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <p><img src="../figure/precmonthplot-1.png" alt="plot of chunk precmonthplot" /></p>

  <p>The most notable feature of the weather graph is the below average rainfall in July, the most 
critical growing period for corn. To understand whether this affected yield on the field, we
woud also need to look at historic yield. But on your field, you will know those historic
average and be able to have a pretty clear idea of weather impacted the average yield in
a growing season.</p>

  <p>Another possible graph you could make with these data is on the accumulated GDD each month.</p>
</blockquote>

:ET