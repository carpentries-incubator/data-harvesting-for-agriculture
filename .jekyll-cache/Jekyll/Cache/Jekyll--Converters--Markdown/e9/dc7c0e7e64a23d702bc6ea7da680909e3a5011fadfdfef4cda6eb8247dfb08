I"<h4 id="motivating-questions">Motivating Questions:</h4>
<ul>
  <li>What are the common file types in agricultural data?</li>
  <li>What applications do I need to open these files?</li>
  <li>How can I make maps of my yield or application?</li>
</ul>

<h4 id="objectives-with-spatial-data">Objectives with Spatial Data:</h4>
<ul>
  <li>Determine whether data are stored in vector or raster format</li>
  <li>Identify the coordinate system for a dataset</li>
  <li>Talk about when data don’t have a projection defined (missing .prj file)</li>
  <li>Determine UTM zone of a dataset</li>
  <li>Reproject the dataset into UTM</li>
  <li>Import geospatial files into your R environment</li>
  <li>Visualize geospatial data with R</li>
  <li>Create geospatial files from lat/long coordinates</li>
  <li>Create an ab-line</li>
</ul>

<h4 id="keypoints">Keypoints:</h4>
<ul>
  <li>sf is prefereable for data analysis; it is easier to access the dataframe</li>
  <li>Projecting your data in utm is necessary for many of the geometric operations
you perform (e.g. making trial grids and splitting plots into subplot data)</li>
  <li>Different data formats that you are likely to encounter include gpkg, shp
(cpg, dbf, prj, sbn, sbx), geojson, and tif</li>
</ul>

<h3 id="setup">Setup</h3>

<p>Below are the packages that we will use in this episode.</p>

<p>###Introducing Spatial Data with an Example Using Trial Design Data</p>

<p>####Read in the trial design</p>

<p>Use the function <code class="highlighter-rouge">read_sf()</code> to bring the dataset into your R environment.
Because we have already set the working directory for this file, we only need to
supply the file name. There are many functions for reading files into the
environment, but this function will create an object of class <code class="highlighter-rouge">sf</code>. This class
makes accessing spatial data much easier. Much like a data frame, you can access
variables within an <code class="highlighter-rouge">sf</code> object using the <code class="highlighter-rouge">$</code> operator, for example
<code class="highlighter-rouge">trial$DISTANCE</code>. For this and other reasons like the number of spatial
calculations available for <code class="highlighter-rouge">sf</code> objects, this class is perferred in most situations.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">trial</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_sf</span><span class="p">(</span><span class="s2">"data/trialdesign.gpkg"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>An <code class="highlighter-rouge">sf</code> object contains a geometry column. We can see the geometric points for
each polygon.
In geospatial terms, a polygon represents an area of land with distinct
boundaries represented by a series of points.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">(</span><span class="n">trial</span><span class="o">$</span><span class="n">geom</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Geometry set for 6 features 
## geometry type:  POLYGON
## dimension:      XY
## bbox:           xmin: -81.97862 ymin: 41.74608 xmax: -81.97743 ymax: 41.74659
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs
## First 5 geometries:
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## POLYGON ((-81.97853 41.74656, -81.97853 41.7463...
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## POLYGON ((-81.97832 41.74657, -81.9783 41.74608...
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## POLYGON ((-81.9781 41.74659, -81.97808 41.74609...
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## POLYGON ((-81.97788 41.74658, -81.97787 41.7460...
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## POLYGON ((-81.97767 41.74658, -81.97765 41.7460...
</code></pre></div></div>

<p>####What is a projection?</p>

<p>Geospatial data has a coordinate reference system (CRS) that projects the map in
a specific location. A projection is a way of making the earth’s curved surface fit into something you 
can represent on a flat computer screen. To understand why that matters, take a look
at the difference between <a href="https://en.wikipedia.org/wiki/Mercator_projection#/media/File:Mercator_projection_Square.JPG">the Mercator projection</a> of the world and the 
<a href="https://en.wikipedia.org/wiki/Boggs_eumorphic_projection#/media/File:Boggs_eumorphic_projection_SW.JPG">Boggs eumorphic projection</a></p>

<p>In the Mercator projection, space that doesn’t exist is created to make a “flat” map 
and Greenland and Antarctica disproportionately huge. In the Boggs projection, strategic 
slices are cut out of the ocean so that the sizes appear a bit closer to true, but Canada 
and Russia get pinched and Greenland gets bisected. There will always be some compromises 
made in a projection system that converts curved surfaces to flat ones for the same reason 
that it’s difficult to make an orange peel lie flat. So the method you select will have an 
effect on your outcome.</p>

<p>####Check the coordinate reference system</p>

<p>Some coordinate reference systems, such as UTM zones, are
measured in meters from a reference point in the zone. Latitude and longitude
represent a different type of CRS, defined in terms of angles across a sphere.
Before combining files
and performing operations on a file, it is important to check the CRS. The
function for this is <code class="highlighter-rouge">st_crs().</code></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_crs</span><span class="p">(</span><span class="n">trial</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Coordinate Reference System:
##   EPSG: 4326 
##   proj4string: "+proj=longlat +datum=WGS84 +no_defs"
</code></pre></div></div>

<p>The trial design is in lat/long. If we want to create measures of distance,
we need the trial design in UTM. First, we must determine the UTM zone of the
trial area.</p>

<p>####Calculate the UTM zone from the longitude</p>

<p>The UTM system divides the surface of Earth between 80°S and 84°N latitude into
60 zones, each 6° of longitude in width. Zone 1 covers longitude 180° to 174° W;
zone numbering increases eastward to zone 60 that covers longitude 174 to 180
East. The following code takes a longitude point and determines its UTM zone.
<code class="highlighter-rouge">long2UTM()</code> is a function written to take the argument <code class="highlighter-rouge">long</code> and output the
result of the equation. <code class="highlighter-rouge">floor()</code> returns the largest integer that is not
greater than the input.  The <code class="highlighter-rouge">st_bbox()</code> function returns the bounding box of
the dataset, i.e. the four corners defining a rectangle that would contain all
of the polygons.  By taking the mean of the first and third items returned by
<code class="highlighter-rouge">st_bbox()</code>, we get the longitude of the point directly in the center of the box.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">long2UTM</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">long</span><span class="p">){</span><span class="w">
  </span><span class="n">utm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p">(</span><span class="nf">floor</span><span class="p">((</span><span class="n">long</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">180</span><span class="p">)</span><span class="o">/</span><span class="m">6</span><span class="p">)</span><span class="w"> </span><span class="o">%%</span><span class="w"> </span><span class="m">60</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">utm</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">utmzone</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">long2UTM</span><span class="p">(</span><span class="n">mean</span><span class="p">(</span><span class="n">st_bbox</span><span class="p">(</span><span class="n">trial</span><span class="p">)[</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">)]))</span><span class="w">
</span><span class="n">utmzone</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 17
</code></pre></div></div>

<p>We can see that -81.975805 corresponds to UTM zone
17.</p>

<p>####Projection for UTM</p>

<p><strong>Dena’s comprehension check here: The way to recognize the difference between 
UTM and WGS584 is whether some data or piece of code starts with 326 or 4326? From
reading what’s here, it gives me the impression that that’s more of
an external thing than something you’d see in the file/data? How do you know which one
you’re looking at if you don’t already know? I’d like to brainstorm on a way to make this
section a little easier to understand without doing damage to accuracy.</strong></p>

<p>Using the UTM zone we calculated above, we now need the full ESPG code to
transform the file to the new CRS. EPSG Geodetic Parameter Dataset is a public
registry of spatial reference systems, Earth ellipsoids, coordinate
transformations and related units of measurement. The ESPG is one way to assign
or transform the CRS in R. The ESPG for UTM always begins with “326” and the
last numbers are the number of the zone. The code below pastes together the full
ESPG code for any <code class="highlighter-rouge">utmzone</code> we calculate with <code class="highlighter-rouge">long2UTM</code>. <code class="highlighter-rouge">paste0()</code> pastes
together the two arguments <code class="highlighter-rouge">"326"</code> and <code class="highlighter-rouge">utmzone</code> as string. But when we transform
<code class="highlighter-rouge">trial</code> into UTM, we only need the ESPG number. So we convert that to numeric with
<code class="highlighter-rouge">as.numeric()</code>, giving us a final ESPG of 32617.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">projutm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">paste0</span><span class="p">(</span><span class="s2">"326"</span><span class="p">,</span><span class="w"> </span><span class="n">utmzone</span><span class="p">))</span><span class="w">
</span><span class="n">projutm</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 32617
</code></pre></div></div>

<p>All modern latitude and longitude coordinates use a standard called WGS84.  The ESPG 
for WGS84 is 4326. This is the projection your equipment reads, so any trial design 
files will need to be transformed back into WGS84 before you implement the trial. Also, 
all files from your machinery, such as yield, as-applied, and as-planted, will be 
reported in latitude and longitude.</p>

<p><strong>Dena: What differences do you see in the data itself to recognize whether you’re looking at
WGS84 or UTM in order to know which code you need to use in the transformation?</strong></p>

<p>####Transform the projection of file</p>

<p>To transform the trial design file into UTM, use <code class="highlighter-rouge">st_transform</code> and the crs
object <code class="highlighter-rouge">projutm</code>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">trialutm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_transform</span><span class="p">(</span><span class="n">trial</span><span class="p">,</span><span class="w"> </span><span class="n">projutm</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><strong>Exercise</strong></p>
<ol>
  <li>Bring the file called “hord_f98_asplanted_2017.shp” in your environment. Name
the object <code class="highlighter-rouge">planting</code>. This file contains the planting information for 2017.</li>
  <li>Identify the CRS of the object. <strong>Dena: So far I haven’t seen anything that would help them understand how to do this, unless 326 or 4326 appear somewhere in code or data we haven’t shown them in text yet? Or else I’ve missed something key that it may help to add in.</strong></li>
  <li>Look at the geometry features. What kind of geometric features are in this dataset?</li>
  <li>Transform the file to UTM or Lat/Long, depending on the current CRS.</li>
</ol>

<p><strong>Solution</strong></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">planting</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_sf</span><span class="p">(</span><span class="s2">"data/asplanted.gpkg"</span><span class="p">)</span><span class="w">

</span><span class="n">st_crs</span><span class="p">(</span><span class="n">planting</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Coordinate Reference System:
##   EPSG: 4326 
##   proj4string: "+proj=longlat +datum=WGS84 +no_defs"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">planting</span><span class="o">$</span><span class="n">geom</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Geometry set for 6382 features 
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: -81.97843 ymin: 41.73952 xmax: -81.97315 ymax: 41.74653
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs
## First 5 geometries:
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## POINT (-81.97829 41.73953)
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## POINT (-81.97828 41.73953)
## POINT (-81.97828 41.73953)
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## POINT (-81.97827 41.73953)
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## POINT (-81.97825 41.73953)
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">planting_latlong</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_transform</span><span class="p">(</span><span class="n">planting</span><span class="p">,</span><span class="w"> </span><span class="m">4326</span><span class="p">)</span><span class="w">

</span><span class="n">st_crs</span><span class="p">(</span><span class="n">planting_latlong</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Coordinate Reference System:
##   EPSG: 4326 
##   proj4string: "+proj=longlat +datum=WGS84 +no_defs"
</code></pre></div></div>

<p>The cleaned planting file was in UTM initially. The zone is 17 which is to be 
expected as it is from the same field as the trial design file we worked with earlier. 
When we look at the geometry features, they are 6382 points defined in x 
and y coordinates. Using the ESPG for lat/long we covered earlier 4326, we create a new
file called <code class="highlighter-rouge">planting_latlong</code> with the CRS of WGS84.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">trialutm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_transform</span><span class="p">(</span><span class="n">trial</span><span class="p">,</span><span class="w"> </span><span class="n">projutm</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>####Save the file</p>

<p>Use <code class="highlighter-rouge">st_write()</code> to save an sf object. If you do not specify a directory, the working 
directory will be used. We include the object we are saving <code class="highlighter-rouge">trialutm</code> and the name 
we would like to give the saved file <code class="highlighter-rouge">"trial.gpkg"</code>. Additionally, we specify the
<code class="highlighter-rouge">layer_options</code> and <code class="highlighter-rouge">update</code> values to enable overwriting an existing file with the same name.</p>

<p>You can save the file as a .gpkg or .shp file. The advantage of a .gpkg file is
that you only save one file rather than four files in a shapefile. Because
shapefiles contain multiple files, they can be corrupted if one piece is missing.
One example is a .prj file. In this case, the shapefile will have no CRS, and
you will need to determine the CRS of the object. You will often need to transform a 
file from UTM to lat/long and save the new file during trial design, so this is an important step.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_write</span><span class="p">(</span><span class="n">trialutm</span><span class="p">,</span><span class="w"> </span><span class="s2">"trial_utm.gpkg"</span><span class="p">,</span><span class="w"> </span><span class="n">layer_options</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'OVERWRITE=YES'</span><span class="p">,</span><span class="w"> </span><span class="n">update</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Updating layer `trial_utm' to data source `trial_utm.gpkg' using driver `GPKG'
## options:        OVERWRITE=YES 
## Updating existing layer trial_utm
## Writing 257 features with 10 fields and geometry type Polygon.
</code></pre></div></div>

<p>The new .gpkg file will be visible in your working directory. One common problem
with these files is that when you try to open a .gpkg file for the first time in
R, it might not work if you haven’t opened it in QGIS before.
<strong>Dena: Any idea why this is? During Thursday’s meeting, we weren’t sure if we were going to get into
QGIS. If this is something that is critical, we should make sure to get QGIS available.</strong></p>

<p>####Visualize the trial map</p>

<p>We often want to visualize the contents of geospatial files. When we design a trial, 
we need to see the resulting applications. With yield data, we look for spatial patterns 
in the field, where is the yield higher or more varied. Before making a map, we need to
know what variables are in the trial dataset.
Use <code class="highlighter-rouge">names()</code> to view the different variables in <code class="highlighter-rouge">trialutm</code>. Say we want to make a
map of the nitrogen rates. We need to identify the variable name for the target
nitrogen.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">names</span><span class="p">(</span><span class="n">trialutm</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##  [1] "GRIDID"     "GRIDX"      "GRIDY"      "DISTANCE"   "TREATMENT" 
##  [6] "BLOCK"      "RANDNBR"    "treat_type" "NRATE"      "SEEDRATE"  
## [11] "geom"
</code></pre></div></div>

<p>In <code class="highlighter-rouge">trialutm</code> there are 11 variables, but the variables we might want to map are
<code class="highlighter-rouge">NRATE</code> and <code class="highlighter-rouge">SEEDRATE</code>. The following map is created with functions from a package 
called <code class="highlighter-rouge">tmap</code>. We are using <code class="highlighter-rouge">tm_polygon()</code>
fill the polygons with a color based on the variable <code class="highlighter-rouge">NRATE</code> inside the object
<code class="highlighter-rouge">trialutm </code>. For a different kind of geospatial data such as points, we need to use
<code class="highlighter-rouge">tm_dots()</code> or <code class="highlighter-rouge">tm_squares()</code>. <code class="highlighter-rouge">tmap</code> provides many options for displaying data, 
including text markers on the map. Text labels might be good for making a map of 
several land parcels with their names as the label. We use other arguments in the
code below to choose the position of the map
legend, title of the variable, size of text, and width of legend.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tm_shape</span><span class="p">(</span><span class="n">trialutm</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tm_polygons</span><span class="p">(</span><span class="s1">'NRATE'</span><span class="p">,</span><span class="w"> </span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Nitrogen Rate"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">tm_layout</span><span class="p">(</span><span class="n">legend.outside</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">frame</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">tm_legend</span><span class="p">(</span><span class="n">text.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w">
            </span><span class="n">title.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w">
            </span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w">
            </span><span class="n">bg.color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../figure/map-1.png" alt="plot of chunk map" /></p>

<p>####Creating Spatial Objects</p>

<p>You may also have the coordinates of a spatial object but not a spatial file.
One example is a boundary file or AB-line for your field. We will use the
AB-line and boundary files later when designing the trials. But for this
example, they are good for displaying how to create a spatial object from
coordinates.</p>

<p>####AB-line File (reading it in or creating it)</p>

<p>Some of you may have a shapefile of your ab-line, but most of you will have the
two endpoints. This is all you need to make a geospatial object for your ab_line 
in R. First, we define the latitude and longitude of the two points. We will call
these point A and point B.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LongA</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">-82.97452</span><span class="w">
</span><span class="n">LatA</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">40.73862</span><span class="w">

</span><span class="n">LongB</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">-82.97452</span><span class="w">
</span><span class="n">LatB</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">40.74480</span><span class="w">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">st_linestring()</code> creates an object of class sf from a matrix.
<code class="highlighter-rouge">rbind(c(LongA, LatA), c(LongB, LatB))</code> creates a matrix with two rows, one for point A and
one for point B. This object is then piped into the function <code class="highlighter-rouge">st_linestring()</code> to create 
the <code class="highlighter-rouge">sf</code> object. Finally, using <code class="highlighter-rouge">st_sf()</code> and  <code class="highlighter-rouge">st_sfc()</code> we create a simple feature geometry 
column from the set of geometries in <code class="highlighter-rouge">ab_string</code>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ab_string</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="n">LongA</span><span class="p">,</span><span class="w"> </span><span class="n">LatA</span><span class="p">),</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">LongB</span><span class="p">,</span><span class="w"> </span><span class="n">LatB</span><span class="p">))</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">st_linestring</span><span class="p">()</span><span class="w"> 
</span><span class="n">ab_line</span><span class="w"> </span><span class="o">&lt;-</span><span class="n">st_sf</span><span class="p">(</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'ab_line'</span><span class="p">,</span><span class="w"> </span><span class="n">st_sfc</span><span class="p">(</span><span class="n">ab_string</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>Now we must assign the CRS of the line. We know that the coordinates were taken
from an object in WGS84, <strong>Dena - How do we know that?</strong> so we can assign the same 
CRS with <code class="highlighter-rouge">st_crs</code> and typing
out the correct <code class="highlighter-rouge">crs</code>. Another way we can do this is by using <code class="highlighter-rouge">crs()</code>. This
second method is preferred to avoid mistakes when remembering the UTM zone of
multiple files. <strong>Dena: If the second method is preferred, then let’s not introduce
the first method, so that the instructions they see lead them to do the right thing.</strong></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_crs</span><span class="p">(</span><span class="n">ab_line</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_crs</span><span class="p">(</span><span class="n">trial</span><span class="p">)</span><span class="w">
</span><span class="n">st_crs</span><span class="p">(</span><span class="n">ab_line</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Coordinate Reference System:
##   EPSG: 4326 
##   proj4string: "+proj=longlat +datum=WGS84 +no_defs"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_write</span><span class="p">(</span><span class="n">ab_line</span><span class="p">,</span><span class="s2">"abline.gpkg"</span><span class="p">,</span><span class="w"> </span><span class="n">layer_options</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'OVERWRITE=YES'</span><span class="p">,</span><span class="w"> </span><span class="n">update</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Updating layer `abline' to data source `abline.gpkg' using driver `GPKG'
## options:        OVERWRITE=YES 
## Updating existing layer abline
## Writing 1 features with 1 fields and geometry type Line String.
</code></pre></div></div>

<p>Plot the resulting AB-line with the generic plotting function for <code class="highlighter-rouge">sf</code> objects.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">ab_line</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../figure/plotabline-1.png" alt="plot of chunk plotabline" /></p>

<p>####Reading in the Boundary File</p>

<p>We will read in the boundary file and plot the boundary file with the abline to see 
how the farmer drives across the field.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundary</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_sf</span><span class="p">(</span><span class="s2">"data/boundary.gpkg"</span><span class="p">)</span><span class="w">
</span><span class="n">st_crs</span><span class="p">(</span><span class="n">boundary</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Coordinate Reference System:
##   EPSG: 4326 
##   proj4string: "+proj=longlat +datum=WGS84 +no_defs"
</code></pre></div></div>

<p>After plotting <code class="highlighter-rouge">boundary</code>, we plot <code class="highlighter-rouge">ab_line</code> with <code class="highlighter-rouge">add = TRUE</code> which adds the new 
plot over the existing plot of the field boundary. We see that the farmer drives 
across the longest part of the field, beginning on the right-hand side.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">boundary</span><span class="o">$</span><span class="n">geom</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">ab_line</span><span class="p">,</span><span class="w"> </span><span class="n">add</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../figure/plotboth-1.png" alt="plot of chunk plotboth" /></p>
:ET