I"‡o<h4 id="motivating-questions">Motivating Questions:</h4>
<ul>
  <li>What are the common file types in agricultural data?</li>
  <li>What applications do I need to open these files?</li>
  <li>How can I make maps of my yield or application?</li>
</ul>

<h4 id="objectives-with-spatial-data">Objectives with Spatial Data:</h4>
<ul>
  <li>Determine whether data are stored in vector or raster format</li>
  <li>Identify the coordinate system for a dataset</li>
  <li>Talk about when data don‚Äôt have a projection defined (missing .prj file)</li>
  <li>Determine UTM zone of a dataset</li>
  <li>Reproject the dataset into UTM</li>
  <li>Import geospatial files into your R environment</li>
  <li>Visualize geospatial data with R</li>
  <li>Create geospatial files from lat/long coordinates</li>
  <li>Create an ab-line</li>
</ul>

<h4 id="keypoints">Keypoints:</h4>
<ul>
  <li>sf is prefereable for data analysis; it is easier to access the dataframe</li>
  <li>Projecting your data in utm is necessary for many of the geometric operations
you perform (e.g. making trial grids and splitting plots into subplot data)</li>
  <li>Different data formats that you are likely to encounter include gpkg, shp
(cpg, dbf, prj, sbn, sbx), geojson, and tif</li>
</ul>

<h3 id="setup">Setup</h3>

<p>Below are the packages that we will use in this episode.</p>

<p>###Introducing Spatial Data with SSURGO data</p>

<p>####What is a CRS?</p>

<p>Geospatial data has a coordinate reference system (CRS) that reports how the map is projected and what point is used as a reference. A projection is a way of making the earth‚Äôs curved surface fit into something you 
can represent on a flat computer screen. The point used for reference during projection is called a datum.</p>

<h2 id="importance-of-projections">Importance of Projections</h2>
<p>To understand why projection matters, take a look
at the difference between <a href="https://en.wikipedia.org/wiki/Mercator_projection#/media/File:Mercator_projection_Square.JPG">the Mercator projection</a> of the world and the 
<a href="https://en.wikipedia.org/wiki/Boggs_eumorphic_projection#/media/File:Boggs_eumorphic_projection_SW.JPG">Boggs eumorphic projection</a></p>

<p>In the Mercator projection, space that doesn‚Äôt exist is created to make a ‚Äúflat‚Äù map 
and Greenland and Antarctica disproportionately huge. In the Boggs projection, strategic 
slices are cut out of the ocean so that the sizes appear a bit closer to true, but Canada 
and Russia get pinched and Greenland gets bisected. There will always be some compromises 
made in a projection system that converts curved surfaces to flat ones for the same reason 
that it‚Äôs difficult to make an orange peel lie flat. So the method you select will have an 
effect on your outcome.</p>

<p>####Reading in the Boundary File</p>

<p>Before we can look at a CRS in R, we need to have a geospatial file in the R environment. We will bring in the field boundary. Use the function <code class="highlighter-rouge">read_sf()</code> to bring the dataset into your R environment.
Because we have already set the working directory for this file, we only need to
supply the file name.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundary</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_sf</span><span class="p">(</span><span class="s2">"data/boundary.gpkg"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>There are many functions for reading files into the
environment, but <code class="highlighter-rouge">read_sf()</code> creates an object of class <code class="highlighter-rouge">sf</code> or simple feature. This class
makes accessing spatial data much easier. Much like a data frame, you can access
variables within an <code class="highlighter-rouge">sf</code> object using the <code class="highlighter-rouge">$</code> operator. For this and other reasons like the number of spatial
calculations available for <code class="highlighter-rouge">sf</code> objects, this class is perferred in most situations.</p>

<p>####Check the coordinate reference system</p>

<p>The function for retreiving the CRS of a simple feature is <code class="highlighter-rouge">st_crs().</code> Generally it is good practice to know the CRS of your files, but before combining files and performing operations on geospatial data, it is particularly important. Some commands will not work if the data is in the wrong CRS or if two dataframes are in different CRSs.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_crs</span><span class="p">(</span><span class="n">boundary</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Coordinate Reference System:
##   EPSG: 4326 
##   proj4string: "+proj=longlat +datum=WGS84 +no_defs"
</code></pre></div></div>
<p>The boundary file is projected in longitude and latitude using the WGS84 datum. This will be CRS of most of the data you see.</p>

<p>Sometimes when looking at a shapefile, the .prj file can be lost. Then <code class="highlighter-rouge">st_crs()</code> will return empty, but <code class="highlighter-rouge">sf</code> objects contain a geometry column. We can see the geometric points for the vertices of
each polygon or the points in the data.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">(</span><span class="n">boundary</span><span class="o">$</span><span class="n">geom</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Geometry set for 6 features 
## geometry type:  MULTIPOLYGON
## dimension:      XY
## bbox:           xmin: -81.97853 ymin: 41.73949 xmax: -81.97306 ymax: 41.7466
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs
## First 5 geometries:
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## MULTIPOLYGON (((-81.97319 41.74574, -81.97385 4...
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## MULTIPOLYGON (((-81.97805 41.74098, -81.97803 4...
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## MULTIPOLYGON (((-81.9741 41.73985, -81.97306 41...
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## MULTIPOLYGON (((-81.97807 41.74157, -81.97806 4...
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## MULTIPOLYGON (((-81.97817 41.74612, -81.97807 4...
</code></pre></div></div>

<p>The trial design is in lat/long using WGS84.</p>

<h2 id="utm-zones">UTM Zones</h2>

<p>Some coordinate reference systems, such as UTM zones, are measured in meters. Latitude and longitude represent a different type of CRS, defined in terms of angles across a sphere. If we want to create measures of distance, we need the trial design in UTM. But there are many UTM zones, so we must determine the zone of the trial area.</p>

<p>The UTM system divides the surface of Earth between 80¬∞S and 84¬∞N latitude into
60 zones, each 6¬∞ of longitude in width. Zone 1 covers longitude 180¬∞ to 174¬∞ W;
zone numbering increases eastward to zone 60 that covers longitude 174 to 180
East.</p>

<p>####st_transform and ESPG Codes</p>

<p>For reprojecting spatial data, the function <code class="highlighter-rouge">st_transform()</code> uses an ESPG code to transform a simple feature to the new CRS. EPSG Geodetic Parameter Dataset is a public registry of spatial reference systems, Earth ellipsoids, coordinate transformations and related units of measurement. The ESPG is one way to assign or transform the CRS in R.</p>

<p>The ESPG for UTM always begins with ‚Äú326‚Äù and the last numbers are the number of the zone. The ESPG for WGS84 is 4326. This is the projection your equipment reads, so any trial design  files will need to be transformed back into WGS84 before you implement the trial. Also, all files from your machinery, such as yield, as-applied, and as-planted, will be reported in latitude and longitude with WGS84.</p>

<p>####Transforming</p>

<p>The function <code class="highlighter-rouge">st_transform_utm()</code> transforms a simple feature into a new CRS. This function is in the functions.R script, and is described there.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundaryutm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_transform_utm</span><span class="p">(</span><span class="n">boundary</span><span class="p">)</span><span class="w">
</span><span class="n">st_crs</span><span class="p">(</span><span class="n">boundaryutm</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Coordinate Reference System:
##   EPSG: 32617 
##   proj4string: "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs"
</code></pre></div></div>

<p><strong>Exercise</strong></p>
<ol>
  <li>Bring the file called ‚Äúasplanted.gpkg‚Äù in your environment. Name
the object <code class="highlighter-rouge">planting</code>. This file contains the planting information for 2017.</li>
  <li>Identify the CRS of the object.</li>
  <li>Look at the geometry features. What kind of geometric features are in this dataset?</li>
  <li>Transform the file to UTM or Lat/Long, depending on the current CRS.</li>
</ol>

<p><strong>Solution</strong></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">planting</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_sf</span><span class="p">(</span><span class="s2">"data/asplanted.gpkg"</span><span class="p">)</span><span class="w">

</span><span class="n">st_crs</span><span class="p">(</span><span class="n">planting</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Coordinate Reference System:
##   EPSG: 4326 
##   proj4string: "+proj=longlat +datum=WGS84 +no_defs"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">planting</span><span class="o">$</span><span class="n">geom</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Geometry set for 6382 features 
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: -81.97843 ymin: 41.73952 xmax: -81.97315 ymax: 41.74653
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs
## First 5 geometries:
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## POINT (-81.97829 41.73953)
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## POINT (-81.97828 41.73953)
## POINT (-81.97828 41.73953)
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## POINT (-81.97827 41.73953)
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## POINT (-81.97825 41.73953)
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plantingutm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_transform_utm</span><span class="p">(</span><span class="n">planting</span><span class="p">)</span><span class="w">

</span><span class="n">st_crs</span><span class="p">(</span><span class="n">plantingutm</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Coordinate Reference System:
##   EPSG: 32617 
##   proj4string: "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs"
</code></pre></div></div>

<p>The cleaned planting file was in WGS84 initially. When we look at the geometry features, they are 6382 points defined in xand y coordinates. Using <code class="highlighter-rouge">st_transform_utm()</code> we create a new file called <code class="highlighter-rouge">plantingutm</code> with the CRS of UTM zone 17.</p>

<p>####Save the file</p>

<p>Use <code class="highlighter-rouge">st_write()</code> to save an sf object. If you do not specify a directory, the working 
directory will be used. We include the object we are saving <code class="highlighter-rouge">boundaryutm</code> and the name 
we would like to give the saved file <code class="highlighter-rouge">"boundary_utm.gpkg"</code>. Additionally, we specify the
<code class="highlighter-rouge">layer_options</code> and <code class="highlighter-rouge">update</code> values to enable overwriting an existing file with the same name.</p>

<p>You can save the file as a .gpkg or .shp file. The advantage of a .gpkg file is
that you only save one file rather than four files in a shapefile. Because
shapefiles contain multiple files, they can be corrupted if one piece is missing.
One example is a .prj file. In this case, the shapefile will have no CRS, and
you will need to determine the CRS of the object. You will often need to transform a 
file from UTM to lat/long and save the new file during trial design, so this is an important step.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_write</span><span class="p">(</span><span class="n">boundaryutm</span><span class="p">,</span><span class="w"> </span><span class="s2">"boundary_utm.gpkg"</span><span class="p">,</span><span class="w"> </span><span class="n">layer_options</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'OVERWRITE=YES'</span><span class="p">,</span><span class="w"> </span><span class="n">update</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Updating layer `boundary_utm' to data source `boundary_utm.gpkg' using driver `GPKG'
## options:        OVERWRITE=YES 
## Updating existing layer boundary_utm
## Writing 10 features with 1 fields and geometry type Multi Polygon.
</code></pre></div></div>

<p>The new .gpkg file will be visible in your working directory. One common problem
with these files is that when you try to open a .gpkg file for the first time in
R, it might not work if you haven‚Äôt opened it in QGIS before.</p>

<p>####Visualizing the data</p>

<p>There are several ways to visualize spatial data. First, we can use <code class="highlighter-rouge">plot()</code> to look at the basic shape of the data.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">boundary</span><span class="o">$</span><span class="n">geom</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../figure/unnamed-chunk-2-1.png" alt="plot of chunk unnamed-chunk-2" /></p>

<p>We can also plot the data where the polygons change color based on the value of one of the variables. This can be done with a package <code class="highlighter-rouge">tmap()</code>. We will discuss this package more in the next lesson, but we provide the function <code class="highlighter-rouge">map_poly()</code> in the functions.R script for making a simple map with polygon features colored based on a given variable. The function requires a spatial object and a variable name in ‚Äò‚Äô.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">map_poly</span><span class="p">(</span><span class="n">boundary</span><span class="p">,</span><span class="w"> </span><span class="s1">'Type'</span><span class="p">,</span><span class="w"> </span><span class="s1">'Part of Field'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../figure/unnamed-chunk-3-1.png" alt="plot of chunk unnamed-chunk-3" /></p>

<p>#SSURGO Soil Data</p>

<p>The SSURGO data is probably a dataset you are familiar with already. You can obtain a soil
description of your field on the Web Soil Survey website below. The SSURGO dataset has been
developed over a century of surveying land and analyzing soil samples across the United States.
While the website is one way to access the soil data, R also has a package called <code class="highlighter-rouge">FedData</code> 
that has a function <code class="highlighter-rouge">get_ssurgo()</code> for accessing the soil data in the R environment.</p>

<p>https://websoilsurvey.sc.egov.usda.gov/App/WebSoilSurvey.aspx</p>

<p>The next line brings the SSURGO data into the R environment with the name <code class="highlighter-rouge">ssurgo</code> and the  object <code class="highlighter-rouge">boundary</code> from the geospatial lesson. Note here that the class of <code class="highlighter-rouge">boundary</code> needs  to be <code class="highlighter-rouge">spatial</code> rather than <code class="highlighter-rouge">sf</code>, so we transform the object with <code class="highlighter-rouge">as(boundary,"Spatial")</code>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundary.sp</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">boundary</span><span class="p">,</span><span class="w"> </span><span class="s2">"Spatial"</span><span class="p">)</span><span class="w">
</span><span class="n">ssurgo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_ssurgo</span><span class="p">(</span><span class="n">boundary.sp</span><span class="p">,</span><span class="w"> </span><span class="s2">"field1"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in {: task 1 failed - "Cannot open layer"
</code></pre></div></div>

<p>The downloaded <code class="highlighter-rouge">ssurgo</code> is a list with 2 objects, <code class="highlighter-rouge">spatial</code> and <code class="highlighter-rouge">tabular</code>. The <code class="highlighter-rouge">spatial</code> 
object contains the polygons of soil types for the field, and  <code class="highlighter-rouge">tabular</code> contains many 
dataframes with attributes collected for the soil and soil horizons. Note that these dataframes 
and their relationships with one another ar very complex. To use these data, you must carefully 
read the SSURGO documentation. Merging the dataframes to have one value of the attributes for 
each soil polygon requires reducing the dimension of the data, often by weighting the attributes
by horizon depth.</p>

<p>Let‚Äôs make a map of the soil types on this field. First, we need to locate the part of
<code class="highlighter-rouge">tabular</code> with the soil names; these can be found in <code class="highlighter-rouge">muaggatt</code>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ssurgo</span><span class="o">$</span><span class="n">tabular</span><span class="o">$</span><span class="n">muaggatt</span><span class="w"> 
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in eval(expr, envir, enclos): object 'ssurgo' not found
</code></pre></div></div>

<p><em>Exercise 4</em>: What are the soil types present on the field as seen in <code class="highlighter-rouge">names</code>? Are the soil 
defined by anything other than the soil type?</p>

<p><em>Exercise 4 Solution</em></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## function (x)  .Primitive("names")
</code></pre></div></div>

<p>Looking at <code class="highlighter-rouge">names</code> we can see there are eight types of soil on the field, and the dataframe 
reports areas with different slopes with different names. We often know the slope of the field, 
and so we may want to combine areas of the field with the same soil type and different slopes.</p>

<p>We need one dataframe with both the soil name and spatial data. We will merge the soil data 
and the spatial data by the <code class="highlighter-rouge">musym</code>. Note that in one of the dataframes the variable is 
capitalized and not in the other. We must rename the variable for consistency using <code class="highlighter-rouge">rename()</code> from <code class="highlighter-rouge">dplyr</code>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spatial</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">ssurgo</span><span class="o">$</span><span class="n">spatial</span><span class="p">,</span><span class="w"> </span><span class="s2">"sf"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in .class1(object): object 'ssurgo' not found
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spatial</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dplyr</span><span class="o">::</span><span class="n">rename</span><span class="p">(</span><span class="n">spatial</span><span class="p">,</span><span class="w"> </span><span class="n">musym</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MUSYM</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in dplyr::rename(spatial, musym = MUSYM): object 'spatial' not found
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spatial</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">merge</span><span class="p">(</span><span class="n">spatial</span><span class="p">,</span><span class="w"> </span><span class="n">names</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"musym"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in merge(spatial, names, by = "musym"): object 'spatial' not found
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">(</span><span class="n">spatial</span><span class="o">$</span><span class="n">muname</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in head(spatial$muname): object 'spatial' not found
</code></pre></div></div>

<p><em>Exercise 5</em>: Create the Soil Map</p>

<p>Use <code class="highlighter-rouge">tmap</code> to make a map where the polygon color is informed by the soil names in
<code class="highlighter-rouge">muname</code>. <em>Hint</em>: use <code class="highlighter-rouge">tm_polygons()</code>.</p>

<p><em>Exercise 5 Solution</em></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">map_soil</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tm_shape</span><span class="p">(</span><span class="n">spatial</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tm_polygons</span><span class="p">(</span><span class="s1">'muname'</span><span class="p">,</span><span class="w"> </span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Soil Type"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tm_layout</span><span class="p">(</span><span class="n">legend.outside</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">frame</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">tm_legend</span><span class="p">(</span><span class="n">text.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w">
            </span><span class="n">title.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w">
            </span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w">
            </span><span class="n">bg.color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="w">
           </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in as.list.environment(environment()): object 'spatial' not found
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">map_soil</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in eval(expr, envir, enclos): object 'map_soil' not found
</code></pre></div></div>

<p>The map shows that there are quite a few soil types on the field, and several show up
in different sections of the field. However, most of the soils are silt loam. It might 
be difficult to understand the different soils without more information about soil weathering 
and texture. This is also provided within SSURGO and is likely something you know about in 
your own field.</p>

<p>For an example of how this is done with clay, silt, and sand content, contact 
the workshop instructors.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">soil_content</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">c_s_s_soil</span><span class="p">(</span><span class="n">ssurgo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ssurgo</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in c_s_s_soil(ssurgo = ssurgo): object 'ssurgo' not found
</code></pre></div></div>
:ET