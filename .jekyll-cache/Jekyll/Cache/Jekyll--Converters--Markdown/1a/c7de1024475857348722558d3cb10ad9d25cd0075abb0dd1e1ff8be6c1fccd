I"Ÿ<font color="magenta"> This will eventually come before the 01-Intro-to-R lesson</font>
<p>\</p>
<font color="magenta"> Do we need to link the terms to a glossary?</font>

<h1 id="programming-concepts-and-language">Programming concepts and language</h1>

<p>Programming doesn‚Äôt have to be scary, and we have some real-world examples to help you understand what‚Äôs going on with these words we‚Äôre typing in a window. The words in bold will come up in a programming context later on, but it might help to have a mental reference picture to associate with these words.</p>

<p>Let‚Äôs imagine that instead of a program to work with numbers and letters, we‚Äôre creating a program that cooks breakfast instead.</p>

<p>In order to make breakfast, you need:</p>
<ul>
  <li>A <strong>working directory</strong> (the place where you‚Äôre doing things, such as your kitchen countertop)</li>
  <li>Available <strong>data</strong> (information about what you‚Äôre working with)
    <ul>
      <li>Data could be an inventory of your pantry, a grocery shopping list, a map of the store, a collection of prices at the store, and so forth.</li>
    </ul>
  </li>
  <li><strong>Types</strong> of <strong>objects</strong> ‚Äì a method of grouping what can be done to what types of things.
    <ul>
      <li>Food is one type of thing; people are another; pets are a third.</li>
      <li>A specific food object can be an egg or a pancake; a particular pet object can be your cat or your dog.</li>
    </ul>
  </li>
  <li>Some <strong>inputs</strong> that may be <strong>objects</strong> of appropriate <strong>types</strong> (breakfast food ingredients)
    <ul>
      <li>You create breakfast by performing actions on objects of food types, and then you feed it to things of the people and pet types.</li>
    </ul>
  </li>
  <li>Some <strong>functions</strong> (recipes that work with the ingredients)
    <ul>
      <li>Inputs to functions are usually stored in <strong>variables</strong> ‚Äì you don‚Äôt always want to make the same thing every day, so the instructions have placeholder names for things that are similar to each other but may vary. (A ‚Äútodays_cheese‚Äù variable could hold Stilton for one day‚Äôs omelet and cheddar for the next.)</li>
    </ul>
  </li>
  <li>You need to match your <strong>object</strong> types to your <strong>functions</strong>.
    <ul>
      <li>You shouldn‚Äôt use a pet-type object as an input to a breakfast-making function. (Nobody wants to eat the goldfish for breakfast.)</li>
      <li>You might be able to use a dinner-type food object as an input to a breakfast-making function, but use caution.</li>
    </ul>
  </li>
  <li>Some <strong>outputs</strong> (food ready to be consumed)</li>
  <li>A <strong>destination</strong> (where to put the food that‚Äôs ready to be consumed)
    <ul>
      <li>You could put your outputs in your working directory (eat breakfast in your kitchen) or you could send it to another location (put leftovers in the refrigerator)</li>
    </ul>
  </li>
</ul>

:ET