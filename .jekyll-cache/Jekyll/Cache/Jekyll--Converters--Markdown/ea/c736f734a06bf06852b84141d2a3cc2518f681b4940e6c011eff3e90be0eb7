I"¿Ø<!-- Dena: We don't discuss most of those data formats - add info or tweak description? -->

<blockquote class="textchunk">
  <h2 id="introducing-spatial-data">Introducing Spatial Data</h2>

  <p>Spatial data can be stored in many different ways, and an important part of using your farm‚Äôs data will involve understanding what format your data is already in and what format another program needs it to be in. During the course of this lesson, we‚Äôll learn:</p>

  <ul>
    <li>How to identify which coordinate reference system (CRS) a data file is using</li>
    <li>How, when, and why to transform data from the WGS84 standard to the UTM standard (or vice versa)</li>
    <li>How to save the transformed data as a new file</li>
    <li>Some ways of creating visualizations from your data</li>
  </ul>

</blockquote>

<blockquote class="textchunk">
  <h2 id="what-is-a-crs">What is a CRS?</h2>

  <p>Geospatial data has a coordinate reference system (CRS) that reports how the map is projected and what point is used as a reference. A projection is a way of making the earth‚Äôs curved surface fit into something you can represent on a flat computer screen. The point used for reference during projection is called a datum.</p>

</blockquote>

<blockquote class="textchunk">
  <h2 id="importance-of-projections">Importance of Projections</h2>
  <p>To understand why projection matters, take a look at the difference between <a href="https://en.wikipedia.org/wiki/Mercator_projection#/media/File:Mercator_projection_Square.JPG">the Mercator projection</a> of the world and the <a href="https://en.wikipedia.org/wiki/Boggs_eumorphic_projection#/media/File:Boggs_eumorphic_projection_SW.JPG">Boggs eumorphic projection</a>.</p>

  <table>
    <thead>
      <tr>
        <th style="text-align: center">Mercator</th>
        <th style="text-align: center">Boggs eumorphic projection</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: center"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Mercator_projection_Square.JPG/1024px-Mercator_projection_Square.JPG" alt="" /></td>
        <td style="text-align: center"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a3/Boggs_eumorphic_projection_SW.JPG/1280px-Boggs_eumorphic_projection_SW.JPG" alt="" /></td>
      </tr>
    </tbody>
  </table>

  <p>In the Mercator projection, space that doesn‚Äôt exist is created to make a ‚Äúflat‚Äù map and Greenland and Antarctica disproportionately huge. In the Boggs projection, strategic slices are cut out of the ocean so that the sizes appear a bit closer to true, but Canada and Russia get pinched and Greenland gets bisected. There will always be some compromises made in a projection system that converts curved surfaces to flat ones for the same reason that it‚Äôs difficult to make an orange peel lie flat. So the method you select will have an effect on your outcome.</p>

</blockquote>

<blockquote class="textchunk">
  <h2 id="understanding-file-types-and-crs-types">Understanding file types and CRS types</h2>

  <p>Geospatial data files have several potential variations, including:</p>
  <ul>
    <li><strong>Vector or raster data</strong>: Whether the information is stored as lines and curves (vector) or as individual dots (raster or bitmap).</li>
    <li><strong>File types</strong>: Several different shape files or one unified geopackage file</li>
    <li><strong>Coordinate reference systems (CRSes)</strong>: Latitude/longitude (WGS84, measured in degrees) or UTM (measured as a distance from a fixed point in meters)</li>
  </ul>

  <p>Any of this information can come in any combination ‚Äì you can have vector or raster data in any CRS in either a geopackage file or a collection of shape files. 
<img src="../figure/geo_spatial_figs/image24.png" width="50%" /></p>

  <p>The image on the left below is a vector-based representation of GIS data, with lines and curves; the image on the right is a raster-based representation, with individual values assigned to particular locations in a grid.
<img src="../figure/geo_spatial_figs/image27.png" width="50%" /></p>

  <p>In order to make data from different sources work together, you‚Äôll need to be able to identify what type of data in what CRS you have and how to convert them to the same type of thing ‚Äì making sure you‚Äôre comparing apples to apples.</p>

  <p>For example:</p>
  <ul>
    <li>The data coming from your equipment will probably be in separate <strong>shape files</strong>. This allows the steering system to work with one file, the planting system to track rates in another file, and so forth. It‚Äôs like giving a group of reporters their own notebooks, instead of asking them all to share the same notebook at the same time.</li>
    <li>However, once the data has been collected, it‚Äôs easier for us to combine those reporters‚Äô notebooks into one <strong>geopackage</strong> file so that the data is all in one place for us to work with at the same time.</li>
    <li>Data coming from your equipment will also likely be reported in a CRS based on <strong>latitude/longitude (WGS84)</strong>, but in order to do calculations based on distance within a field, we‚Äôll want to convert to UTM.</li>
    <li>Because each equipment manufacturer has their own standards, there may be some additional manipulation needed to get from the manufacturer‚Äôs possibly proprietary standard to something that you can use yourself. (This is one reason it‚Äôs helpful to provide us with data before class begins, so that we can help work out the pattern for decoding your equipment manufacturer‚Äôs data before the workshop starts.)</li>
  </ul>

</blockquote>

<blockquote class="textchunk">
  <h2 id="reading-in-the-boundary-file">Reading in the Boundary File</h2>

  <p>Before we can look at a CRS in R, we need to have a geospatial file in the R environment. We will bring in the field boundary. Use the function <code class="highlighter-rouge">read_sf()</code> to bring the dataset into your R environment. Because we have already set the working directory for this file, we don‚Äôt need to give the whole path, just the folder data that the gpkg file is stored within.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundary</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_sf</span><span class="p">(</span><span class="s2">"data/boundary.gpkg"</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <p>There are many functions for reading files into the environment, but <code class="highlighter-rouge">read_sf()</code> creates an object of class <strong><code class="highlighter-rouge">sf</code></strong> or <strong>simple feature.</strong> This class makes accessing spatial data much easier. Much like a data frame, you can access variables within an <code class="highlighter-rouge">sf</code> object using the <code class="highlighter-rouge">$</code> operator. For this and other reasons like the number of spatial calculations available for <code class="highlighter-rouge">sf</code> objects, this class is perferred in most situations.</p>

</blockquote>

<blockquote class="textchunk">
  <h2 id="check-the-coordinate-reference-system">Check the coordinate reference system</h2>

  <p>The function for retreiving the CRS of a simple feature is <code class="highlighter-rouge">st_crs().</code> Generally it is good practice to know the CRS of your files, but before combining files and performing operations on geospatial data, it is particularly important. Some commands will not work if the data is in the wrong CRS or if two dataframes are in different CRSs.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_crs</span><span class="p">(</span><span class="n">boundary</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Coordinate Reference System:
  EPSG: 4326 
  proj4string: "+proj=longlat +datum=WGS84 +no_defs"
</code></pre></div>  </div>

  <p>The boundary file is projected in longitude and latitude using the WGS84 datum. This will be the CRS of most of the data you see.</p>

</blockquote>

<blockquote class="callout">
  <h2 id="lost-prj-files">Lost .prj files</h2>
  <p>Sometimes when looking at a shapefile, the .prj file can be lost. Then <code class="highlighter-rouge">st_crs()</code> will return empty, but <code class="highlighter-rouge">sf</code> objects contain a geometry column. We can see the geometric points for the vertices of each polygon or the points in the data.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">(</span><span class="n">boundary</span><span class="o">$</span><span class="n">geom</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Geometry set for 1 feature 
geometry type:  POLYGON
dimension:      XY
bbox:           xmin: -82.87853 ymin: 40.83945 xmax: -82.87306 ymax: 40.8466
epsg (SRID):    4326
proj4string:    +proj=longlat +datum=WGS84 +no_defs
</code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POLYGON ((-82.87319 40.84574, -82.87306 40.8398...
</code></pre></div>  </div>

</blockquote>

<blockquote class="textchunk">
  <h2 id="utm-zones">UTM Zones</h2>

  <p>Some coordinate reference systems, such as UTM zones, are measured in meters. Latitude and longitude represent a different type of CRS, defined in terms of angles across a sphere. If we want to create measures of distance, we need the trial design in UTM. But there are many UTM zones, so we must determine the zone of the trial area.</p>

  <p>The UTM system divides the surface of Earth between 80¬∞S and 84¬∞N latitude into 60 zones, each 6¬∞ of longitude in width. Zone 1 covers longitude 180¬∞ to 174¬∞ W; zone numbering increases eastward to zone 60 that covers longitude 174 to 180 East.</p>

</blockquote>

<blockquote class="textchunk">
  <h3 id="st_transform-and-espg-codes">st_transform and ESPG Codes</h3>

  <p>For reprojecting spatial data, the function <code class="highlighter-rouge">st_transform()</code> uses an ESPG code to transform a simple feature to the new CRS. EPSG Geodetic Parameter Dataset is a public registry of spatial reference systems, Earth ellipsoids, coordinate transformations and related units of measurement. The ESPG is one way to assign or transform the CRS in R.</p>

  <p>The ESPG for UTM always begins with ‚Äú326‚Äù and the last numbers are the number of the zone. The ESPG for WGS84 is 4326. This is the projection your equipment reads, so any trial design files will need to be transformed back into WGS84 before you implement the trial. Also, all files from your machinery, such as yield, as-applied, and as-planted, will be reported in latitude and longitude with WGS84.</p>

</blockquote>

<!-- **Dena: I feel like this is a fantastic place to have an exercise with the name and/or first few lines of a file of each
type to ask them to look at them and identify which is which and describe what that means, to check understanding?** -->

<blockquote class="textchunk">
  <h2 id="transforming">Transforming</h2>

  <p>The function <code class="highlighter-rouge">st_transform_utm()</code> transforms a simple feature that is in lat/long into UTM. This function is in the functions.R script, and is described there in more detail. Make sure that you have run <code class="highlighter-rouge">source("functions.R")</code> or you will not have the function in your global environment.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundaryutm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_transform_utm</span><span class="p">(</span><span class="n">boundary</span><span class="p">)</span><span class="w">
</span><span class="n">st_crs</span><span class="p">(</span><span class="n">boundaryutm</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Coordinate Reference System:
  EPSG: 32617 
  proj4string: "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs"
</code></pre></div>  </div>

</blockquote>
<!-- **Dena: This exercise might run well as a talk-through -- ask the room to describe their understanding of how to do the thing -- followed by a type-along where you type what they tell you to do, and then explain what worked or what didn't?** -->

<blockquote class="challenge">
  <h2 id="exercise-exploring-geospatial-files">Exercise: Exploring Geospatial Files</h2>
  <ol>
    <li>Bring the file called ‚Äúasplanted.gpkg‚Äù (from the data subdirectory of your WorkingDir) in your environment. Name the object <code class="highlighter-rouge">planting</code>. This file contains the planting information for 2017.</li>
    <li>Identify the CRS of the object.</li>
    <li>Look at the geometry features. What kind of geometric features are in this dataset?</li>
    <li>Transform the file to UTM or Lat/Long, depending on the current CRS.</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">planting</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_sf</span><span class="p">(</span><span class="s2">"data/asplanted.gpkg"</span><span class="p">)</span><span class="w">
</span><span class="n">st_crs</span><span class="p">(</span><span class="n">planting</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Coordinate Reference System:
  EPSG: 4326 
  proj4string: "+proj=longlat +datum=WGS84 +no_defs"
</code></pre></div>    </div>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">planting</span><span class="o">$</span><span class="n">geom</span><span class="w">
</span></code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Geometry set for 6382 features 
geometry type:  POINT
dimension:      XY
bbox:           xmin: -82.87843 ymin: 40.83952 xmax: -82.87315 ymax: 40.84653
epsg (SRID):    4326
proj4string:    +proj=longlat +datum=WGS84 +no_defs
First 5 geometries:
</code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POINT (-82.87829 40.83953)
</code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POINT (-82.87828 40.83953)
POINT (-82.87828 40.83953)
</code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POINT (-82.87827 40.83953)
</code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POINT (-82.87825 40.83953)
</code></pre></div>    </div>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plantingutm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_transform_utm</span><span class="p">(</span><span class="n">planting</span><span class="p">)</span><span class="w">
</span><span class="n">st_crs</span><span class="p">(</span><span class="n">plantingutm</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Coordinate Reference System:
  EPSG: 32617 
  proj4string: "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs"
</code></pre></div>    </div>

  </blockquote>
</blockquote>

<blockquote class="callout">
  <h2 id="exercise-discussion">Exercise Discussion</h2>

  <p>The cleaned planting file was in WGS84 initially. When we look at the geometry features, they are 6382 points defined in xand y coordinates. Using <code class="highlighter-rouge">st_transform_utm()</code> we create a new file called <code class="highlighter-rouge">plantingutm</code> with the CRS of UTM zone 17.</p>

</blockquote>

<blockquote class="callout">
  <h2 id="save-the-file">Save the file</h2>

  <p>Use <code class="highlighter-rouge">st_write()</code> to save an sf object. If you do not specify a directory, the working directory will be used. We include the object we are saving <code class="highlighter-rouge">boundaryutm</code> and the name we would like to give the saved file <code class="highlighter-rouge">"boundary_utm.gpkg"</code>. Additionally, we specify the <code class="highlighter-rouge">layer_options</code> and <code class="highlighter-rouge">update</code> values to enable overwriting an existing file with the same name.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_write</span><span class="p">(</span><span class="n">boundaryutm</span><span class="p">,</span><span class="w"> </span><span class="s2">"boundary_utm.gpkg"</span><span class="p">,</span><span class="w"> </span><span class="n">layer_options</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'OVERWRITE=YES'</span><span class="p">,</span><span class="w"> </span><span class="n">update</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Updating layer `boundary_utm' to data source `boundary_utm.gpkg' using driver `GPKG'
options:        OVERWRITE=YES 
Updating existing layer boundary_utm
Writing 1 features with 0 fields and geometry type Polygon.
</code></pre></div>  </div>

  <div class="warning highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Warning in CPL_write_ogr(obj, dsn, layer, driver,
as.character(dataset_options), : GDAL Message 1: A geometry of type POLYGON is
inserted into layer boundary_utm of geometry type MULTIPOLYGON, which is not
normally allowed by the GeoPackage specification, but the driver will however do
it. To create a conformant GeoPackage, if using ogr2ogr, the -nlt option can be
used to override the layer geometry type. This warning will no longer be emitted
for this combination of layer and feature geometry type.
</code></pre></div>  </div>

  <p>The new .gpkg file will be visible in your working directory. (Check it out: Browse to your working directory in Windows File Explorer or Mac Finder and see the date and time on your new file.)</p>

</blockquote>

<blockquote class="callout">
  <h2 id="gpkg-vs-shp-files">.gpkg vs. .shp files</h2>
  <p>You can save the file as a .gpkg or .shp file. The advantage of a .gpkg file is that you only save one file rather than four files in a shapefile. Because shapefiles contain multiple files, they can be corrupted if one piece is missing. One example is a .prj file. In this case, the shapefile will have no CRS, and you will need to determine the CRS of the object. You will often need to transform a file from UTM to lat/long and save the new file during trial design, so this is an important step.
One common problem with these files is that when you try to open a .gpkg file for the first time in R, it might not work if you haven‚Äôt opened it in QGIS before. <!-- **Dena: Is this something to mention here, or should it go in the section where we're opening things with QGIS?** --></p>

</blockquote>

<blockquote class="callout">
  <h2 id="visualizing-the-data">Visualizing the data</h2>

  <p>There are several ways to visualize spatial data. First, we can use <code class="highlighter-rouge">plot()</code> to look at the basic shape of the data.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">boundary</span><span class="o">$</span><span class="n">geom</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <p><img src="../fig/rmd-unnamed-chunk-3-1.png" title="plot of chunk unnamed-chunk-3" alt="plot of chunk unnamed-chunk-3" width="612" style="display: block; margin: auto;" /></p>

  <p>We can also plot the data where the polygons change color based on the value of one of the variables. This can be done with a package <code class="highlighter-rouge">tmap()</code>. We will discuss this package more in the next lesson, but we provide the function <code class="highlighter-rouge">map_poly()</code> in the functions.R script for making a simple map with polygon features colored based on a given variable. The function requires a spatial object and a variable name in ‚Äò‚Äô.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">map_poly</span><span class="p">(</span><span class="n">boundary</span><span class="p">,</span><span class="w"> </span><span class="s1">'Type'</span><span class="p">,</span><span class="w"> </span><span class="s1">'Part of Field'</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error: Fill argument neither colors nor valid variable name(s)
</code></pre></div>  </div>

</blockquote>

<!-- **Dena: Is this their first detailed picture? Maybe pause to discuss what types of boundaries they might find useful and
the theory of how to do them?** -->

<blockquote class="callout">
  <h2 id="ssurgo-soil-data">SSURGO Soil Data</h2>

  <p>The SSURGO data is probably a dataset you are familiar with already. You can obtain a soil description of your field on the Web Soil Survey website below. The SSURGO dataset has been developed over a century of surveying land and analyzing soil samples across the United States. While the website is one way to access the soil data, R also has a package called <code class="highlighter-rouge">FedData</code> that has a function <code class="highlighter-rouge">get_ssurgo()</code> for accessing the soil data in the R environment. https://websoilsurvey.sc.egov.usda.gov/App/WebSoilSurvey.aspx</p>

</blockquote>

<blockquote class="callout">
  <h2 id="ssurgo-download">SSURGO Download</h2>
  <p>The next line brings the SSURGO data into the R environment with the name <code class="highlighter-rouge">ssurgo</code> and the  object <code class="highlighter-rouge">boundary</code> from the geospatial lesson. Note here that the class of <code class="highlighter-rouge">boundary</code> needs  to be <code class="highlighter-rouge">spatial</code> rather than <code class="highlighter-rouge">sf</code>, so we transform the object with <code class="highlighter-rouge">as(boundary,"Spatial")</code>.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundary</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">subset</span><span class="p">(</span><span class="n">boundary</span><span class="p">,</span><span class="w"> </span><span class="n">Type</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"Trial"</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error in eval(e, x, parent.frame()): object 'Type' not found
</code></pre></div>  </div>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundary.sp</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">boundary</span><span class="p">,</span><span class="w"> </span><span class="s2">"Spatial"</span><span class="p">)</span><span class="w">
</span><span class="n">ssurgo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">download_ssurgo</span><span class="p">(</span><span class="s2">"samplefield"</span><span class="p">,</span><span class="w"> </span><span class="n">boundary.sp</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Successfully downloaded SSURGO.
</code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>All done!  Woohoo!
</code></pre></div>  </div>

</blockquote>

<blockquote class="callout">
  <h2 id="ssurgo-data">SSURGO Data</h2>

  <p>The downloaded <code class="highlighter-rouge">ssurgo</code> is a list with 2 objects, <code class="highlighter-rouge">spatial</code> and <code class="highlighter-rouge">tabular</code>. The <code class="highlighter-rouge">spatial</code> object contains the polygons of soil types for the field, and  <code class="highlighter-rouge">tabular</code> contains many dataframes with attributes collected for the soil and soil horizons.</p>

  <p>Note that these dataframes and their relationships with one another are very complex. To use these data, you must carefully read the SSURGO documentation. <a href="https://data.nal.usda.gov/system/files/SSURGO_Metadata_-_Table_Column_Descriptions.pdf">The SSURGO Metadata Table Columns Desription document is available online,</a> and some of the segments we‚Äôre going to use are found around page 81.</p>

  <p>Merging the dataframes to have one value of the attributes for each soil polygon requires reducing the dimension of the data, often by weighting the attributes by horizon depth.</p>

  <p>Let‚Äôs make a map of the soil types on this field. First, we need to locate the part of
<code class="highlighter-rouge">tabular</code> with the soil names; these can be found in <code class="highlighter-rouge">muaggatt</code>. (From the Metadata Table Column Desriptions document linked in above, we can learn that ‚Äòmuaggatt‚Äô stands for ‚ÄòMap Unit Aggregated Attributes.‚Äô)</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ssurgo</span><span class="o">$</span><span class="n">tabular</span><span class="o">$</span><span class="n">muaggatt</span><span class="w"> 
</span></code></pre></div>  </div>

</blockquote>

<blockquote class="challenge">
  <h2 id="exercise-soil-names">Exercise: Soil Names</h2>
  <p>What are the soil types present on the field as seen in <code class="highlighter-rouge">names</code>? Are the soil defined by anything other than the soil type?</p>

  <blockquote class="solution">
    <h2 id="solution-1">Solution</h2>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span><span class="w">
</span></code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code># A tibble: 9 x 40
  musym muname mustatus slopegraddcp slopegradwta brockdepmin wtdepannmin
  &lt;chr&gt; &lt;chr&gt;  &lt;lgl&gt;           &lt;dbl&gt;        &lt;dbl&gt; &lt;lgl&gt;             &lt;dbl&gt;
1 BgB   Benni‚Ä¶ NA                  4          3.9 NA                   22
2 Cr    Condi‚Ä¶ NA                  1          1   NA                    7
3 HpE   Henne‚Ä¶ NA                 30         30   NA                  153
4 Lo    Lobde‚Ä¶ NA                  1          1   NA                   69
5 Pm    Pewam‚Ä¶ NA                  1          1   NA                   15
6 Sh    Shoal‚Ä¶ NA                  1          1   NA                   31
7 BeA   Benni‚Ä¶ NA                  1          1.2 NA                   22
8 Crd1‚Ä¶ Cardi‚Ä¶ NA                  3          2.8 NA                   46
9 Crd1‚Ä¶ Cardi‚Ä¶ NA                  9          8.4 NA                   46
# ‚Ä¶ with 33 more variables: wtdepaprjunmin &lt;dbl&gt;, flodfreqdcd &lt;chr&gt;,
#   flodfreqmax &lt;chr&gt;, pondfreqprs &lt;dbl&gt;, aws025wta &lt;dbl&gt;, aws050wta &lt;dbl&gt;,
#   aws0100wta &lt;dbl&gt;, aws0150wta &lt;dbl&gt;, drclassdcd &lt;chr&gt;, drclasswettest &lt;chr&gt;,
#   hydgrpdcd &lt;chr&gt;, iccdcd &lt;lgl&gt;, iccdcdpct &lt;dbl&gt;, niccdcd &lt;dbl&gt;,
#   niccdcdpct &lt;dbl&gt;, engdwobdcd &lt;chr&gt;, engdwbdcd &lt;chr&gt;, engdwbll &lt;chr&gt;,
#   engdwbml &lt;chr&gt;, engstafdcd &lt;chr&gt;, engstafll &lt;chr&gt;, engstafml &lt;chr&gt;,
#   engsldcd &lt;chr&gt;, engsldcp &lt;chr&gt;, englrsdcd &lt;chr&gt;, engcmssdcd &lt;chr&gt;,
#   engcmssmp &lt;chr&gt;, urbrecptdcd &lt;chr&gt;, urbrecptwta &lt;dbl&gt;, forpehrtdcp &lt;chr&gt;,
#   hydclprs &lt;dbl&gt;, awmmfpwwta &lt;dbl&gt;, mukey &lt;dbl&gt;
</code></pre></div>    </div>

  </blockquote>
</blockquote>

<blockquote class="callout">
  <h2 id="exercise-discussion-1">Exercise Discussion</h2>
  <p>Looking at <code class="highlighter-rouge">names</code> we can see there are eight types of soil on the field, and the dataframe reports areas with different slopes with different names. We often know the slope of the field, and so we may want to combine areas of the field with the same soil type and different slopes.</p>

</blockquote>

<!-- JPN: this fixed the saving thing below: https://gis.stackexchange.com/questions/327725/st-write-fails-for-object-created-with-st-difference-using-r -->

<blockquote class="callout">
  <h2 id="merging-dataframes">Merging Dataframes</h2>

  <p>We need one dataframe with both the soil name and spatial data. We will merge the soil data and the spatial data by the <code class="highlighter-rouge">musym</code>. Note that in one of the dataframes the variable is capitalized and not in the other. We must rename the variable for consistency using <code class="highlighter-rouge">rename()</code> from <code class="highlighter-rouge">dplyr</code>.  We also have to do this with the <code class="highlighter-rouge">mukey</code> variable as well.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spatial</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">ssurgo</span><span class="o">$</span><span class="n">spatial</span><span class="p">,</span><span class="w"> </span><span class="s2">"sf"</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spatial</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dplyr</span><span class="o">::</span><span class="n">rename</span><span class="p">(</span><span class="n">spatial</span><span class="p">,</span><span class="w"> </span><span class="n">musym</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MUSYM</span><span class="p">)</span><span class="w">
</span><span class="n">spatial</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dplyr</span><span class="o">::</span><span class="n">rename</span><span class="p">(</span><span class="n">spatial</span><span class="p">,</span><span class="w"> </span><span class="n">mukey</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MUKEY</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spatial</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">merge</span><span class="p">(</span><span class="n">spatial</span><span class="p">,</span><span class="w"> </span><span class="n">names</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"musym"</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">(</span><span class="n">spatial</span><span class="o">$</span><span class="n">muname</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "Bennington silt loam, 0 to 2 percent slopes"
[2] "Bennington silt loam, 0 to 2 percent slopes"
[3] "Bennington silt loam, 0 to 2 percent slopes"
[4] "Bennington silt loam, 2 to 6 percent slopes"
[5] "Bennington silt loam, 2 to 6 percent slopes"
[6] "Condit-Bennington silt loams"               
</code></pre></div>  </div>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st_write</span><span class="p">(</span><span class="n">spatial</span><span class="p">,</span><span class="w"> </span><span class="s2">"data/ssurgo.gpkg"</span><span class="p">,</span><span class="w"> </span><span class="n">layer_options</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'OVERWRITE=YES'</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Updating layer `ssurgo' to data source `data/ssurgo.gpkg' using driver `GPKG'
options:        OVERWRITE=YES 
Updating existing layer ssurgo
Writing 14 features with 43 fields and geometry type Multi Polygon.
</code></pre></div>  </div>

</blockquote>

<blockquote class="challenge">
  <h2 id="exercise-5-create-the-soil-map">Exercise 5: Create the Soil Map</h2>

  <p>Use <code class="highlighter-rouge">map_poly()</code> to make a map where the polygon color is informed by the soil names in
<code class="highlighter-rouge">muname</code>.</p>

  <blockquote class="solution">
    <h2 id="solution-2">Solution</h2>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">map_soil</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">map_poly</span><span class="p">(</span><span class="n">spatial</span><span class="p">,</span><span class="w"> </span><span class="s1">'muname'</span><span class="p">,</span><span class="w"> </span><span class="s2">"Soil Type"</span><span class="p">)</span><span class="w">
</span><span class="n">map_soil</span><span class="w">
</span></code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Some legend labels were too wide. These labels have been resized to 0.63, 0.63, 0.63, 0.52, 0.48, 0.42, 0.47. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.
</code></pre></div>    </div>

    <p><img src="../fig/rmd-map_soil_spatial-1.png" title="plot of chunk map_soil_spatial" alt="plot of chunk map_soil_spatial" width="612" style="display: block; margin: auto;" /></p>

  </blockquote>
</blockquote>

<blockquote class="callout">
  <h2 id="exercise-discussion-2">Exercise Discussion</h2>
  <p>The map shows that there are quite a few soil types on the field, and several show up in different sections of the field. However, most of the soils are silt loam. It might be difficult to understand the different soils without more information about soil weathering and texture. This is also provided within SSURGO and is likely something you know about in your own field.</p>

</blockquote>

<blockquote class="callout">
  <h1 id="example-with-your-own-field">Example with your own field</h1>

  <p>Here we are going to download the SSURGO maps for your own field using your boundary file if you have one. Then, we are going to make a table of the clay, silt, and sand content as well as the water content of the different soil types. There is a function <code class="highlighter-rouge">c_s_s_soil()</code> in <code class="highlighter-rouge">functions.R</code> that uses the soil depth to take an average of the soil measures for each soil type. The only parameter that needs to be</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">soil_content</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">c_s_s_soil</span><span class="p">(</span><span class="n">ssurgo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ssurgo</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  |                                                                            
  |                                                                      |   0%
  |                                                                            
  |===                                                                   |   4%
  |                                                                            
  |=====                                                                 |   7%
  |                                                                            
  |========                                                              |  11%
  |                                                                            
  |==========                                                            |  15%
  |                                                                            
  |=============                                                         |  19%
  |                                                                            
  |================                                                      |  22%
  |                                                                            
  |==================                                                    |  26%
  |                                                                            
  |=====================                                                 |  30%
  |                                                                            
  |=======================                                               |  33%
  |                                                                            
  |==========================                                            |  37%
  |                                                                            
  |=============================                                         |  41%
  |                                                                            
  |===============================                                       |  44%
  |                                                                            
  |==================================                                    |  48%
  |                                                                            
  |====================================                                  |  52%
  |                                                                            
  |=======================================                               |  56%
  |                                                                            
  |=========================================                             |  59%
  |                                                                            
  |============================================                          |  63%
  |                                                                            
  |===============================================                       |  67%
  |                                                                            
  |=================================================                     |  70%
  |                                                                            
  |====================================================                  |  74%
  |                                                                            
  |======================================================                |  78%
  |                                                                            
  |=========================================================             |  81%
  |                                                                            
  |============================================================          |  85%
  |                                                                            
  |==============================================================        |  89%
  |                                                                            
  |=================================================================     |  93%
  |                                                                            
  |===================================================================   |  96%
  |                                                                            
  |======================================================================| 100%

  |                                                                            
  |                                                                      |   0%
  |                                                                            
  |========                                                              |  11%
  |                                                                            
  |================                                                      |  22%
  |                                                                            
  |=======================                                               |  33%
  |                                                                            
  |===============================                                       |  44%
  |                                                                            
  |=======================================                               |  56%
  |                                                                            
  |===============================================                       |  67%
  |                                                                            
  |======================================================                |  78%
  |                                                                            
  |==============================================================        |  89%
  |                                                                            
  |======================================================================| 100%
</code></pre></div>  </div>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">soil_content</span><span class="w">
</span></code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    mukey AREASYMBOL SPATIALVER  MUSYM     clay     silt     sand water_storage
1 1019357      OH033         10    BeA 30.88180 49.35860 19.75960      24.93720
2  168539      OH033         10    BgB 31.09245 48.94345 19.96410      24.72030
3  168557      OH033         10     Cr 33.80601 45.40116 20.79283      21.87375
4  168570      OH033         10    HpE 28.17274 37.20299 34.62427      21.24000
5  168578      OH033         10     Lo 23.32787 49.29454 27.37760      27.86000
6  168588      OH033         10     Pm 34.08070 46.99515 18.92415      25.82340
7  168591      OH033         10     Sh 21.67045 44.65005 33.67950      31.86120
8 2996476      OH033         10 Crd1B1 30.17855 46.96980 22.85165      24.72070
9 2996690      OH033         10 Crd1C2 29.92200 45.94210 24.13590      23.14610
</code></pre></div>  </div>

</blockquote>
:ET