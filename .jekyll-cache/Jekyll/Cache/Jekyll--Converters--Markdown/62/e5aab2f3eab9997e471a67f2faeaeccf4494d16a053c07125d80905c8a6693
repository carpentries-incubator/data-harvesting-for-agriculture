I"Ã¢<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">knitr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">sf</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Linking to GEOS 3.7.2, GDAL 2.4.2, PROJ 5.2.0
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">fasterize</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 
## Attaching package: 'fasterize'
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## The following object is masked from 'package:graphics':
## 
##     plot
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">raster</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Loading required package: sp
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">rjson</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">httr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">rgdal</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## rgdal: version: 1.4-8, (SVN revision 845)
##  Geospatial Data Abstraction Library extensions to R successfully loaded
##  Loaded GDAL runtime: GDAL 2.4.2, released 2019/06/28
##  Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/3.6/Resources/library/rgdal/gdal
##  GDAL binary built with GEOS: FALSE 
##  Loaded PROJ.4 runtime: Rel. 5.2.0, September 15th, 2018, [PJ_VERSION: 520]
##  Path to PROJ.4 shared files: /Library/Frameworks/R.framework/Versions/3.6/Resources/library/rgdal/proj
##  Linking to sp version: 1.3-2
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">rgeos</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## rgeos version: 0.5-2, (SVN revision 621)
##  GEOS runtime version: 3.7.2-CAPI-1.11.2 
##  Linking to sp version: 1.3-1 
##  Polygon checking: TRUE
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">maptools</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Checking rgeos availability: TRUE
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">knitr</span><span class="p">)</span><span class="w">
</span><span class="n">require</span><span class="p">(</span><span class="n">tmap</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Loading required package: tmap
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">require</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Loading required package: ggplot2
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">require</span><span class="p">(</span><span class="n">gridExtra</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Loading required package: gridExtra
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">daymetr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">readr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">measurements</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">FedData</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">lubridate</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 
## Attaching package: 'lubridate'
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## The following object is masked from 'package:base':
## 
##     date
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">knitr</span><span class="o">::</span><span class="n">opts_chunk</span><span class="o">$</span><span class="n">set</span><span class="p">(</span><span class="n">echo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">fig.path</span><span class="o">=</span><span class="s1">'../fig/'</span><span class="p">)</span><span class="w">
</span><span class="n">source</span><span class="p">(</span><span class="s2">"functions.R"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h4 id="motivating-questions">Motivating Questions:</h4>
<ul>
  <li>What are the common file types in agricultural data?</li>
  <li>What publicly available datasets exist for my field?</li>
</ul>

<h4 id="objectives-with-agricultural-data-types">Objectives with Agricultural Data Types</h4>
<ul>
  <li>Describe the format of public weather and soil datasets</li>
  <li>Import weather data from the internet, eg. daymetr</li>
  <li>Access to elevation and ssurgo data with higher resolution</li>
  <li>Derive topography data from elevation data</li>
</ul>

<h4 id="keypoints">Keypoints:</h4>
<ul>
  <li>sf is preferable for data analysis; it is easier to access the dataframe</li>
  <li>Projecting your data in utm is necessary for many of the geometric operations you perform
(e.g. making trial grids and splitting plots into subplot data)</li>
  <li>Compare different data formats, such as gpkg, shp(cpg,dbf,prj,sbn,sbx),geojson,tif</li>
</ul>

<blockquote class="callout">
  <h1 id="daymet-weather-data">Daymet Weather Data</h1>

  <p>The Oak Ridge National Laboratory produces a datset called Daymet which contains predicted
weather observations on a one meter grid. These data come from weather station climate 
observations in a climate model for prediction and include variables such as precipitation,
snow water equivalent, temperature, day length, solar radians, and vapor pressure.</p>

  <p>There is a package in r <code class="highlighter-rouge">daymetr</code> that downloads the daymet weather data within the R environment.
For a single point, you can use the command <code class="highlighter-rouge">download_daymet()</code>. If you want to download the data 
for a set of points, there is also the command <code class="highlighter-rouge">download_daymet_batch()</code> which takes an argument 
a .csv of the points in lat/long. If you want to use this approach, we can give you an example.</p>

</blockquote>

<blockquote class="callout">
  <h1 id="using-daymetr-to-download-weather">Using daymetr to download weather</h1>
  <p>We will use the mean latitude and longitude values from the bounding box as our point for the 
weather data. The functions <code class="highlighter-rouge">cent_long()</code> and <code class="highlighter-rouge">cent_lat()</code> give the mean longitude and latitude points of the bounding box around the <code class="highlighter-rouge">sf</code> object that is supplied. This should be a point near the middle of the field.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#boundary &lt;- read_sf("data/boundary.gpkg")</span><span class="w">
</span><span class="n">boundary</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_sf</span><span class="p">(</span><span class="s2">"data/boundary_transformed.gpkg"</span><span class="p">)</span><span class="w">
</span><span class="n">lon</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cent_long</span><span class="p">(</span><span class="n">boundary</span><span class="p">)</span><span class="w">
</span><span class="n">lat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cent_lat</span><span class="p">(</span><span class="n">boundary</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <p>We also call the site <code class="highlighter-rouge">Field1</code>, but this can be the name of one of your fields if you use it in the future.
We can choose the start and end years. If the data is not available for the year you request, an 
error will be reported. We choose 2000 to 2018 for this example; later we will use the
historical data for comparison. The final option <code class="highlighter-rouge">internal = TRUE</code> means that the daymet 
data is brought into the R environment rather than saved in your working directory. We may want to change the names and units of variables, so we will wait to save the data in the working directory.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weather</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">download_daymet</span><span class="p">(</span><span class="n">site</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Field1"</span><span class="p">,</span><span class="w"> </span><span class="n">lat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="n">lon</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lon</span><span class="p">,</span><span class="w"> </span><span class="n">start</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2000</span><span class="p">,</span><span class="w"> </span><span class="n">end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2018</span><span class="p">,</span><span class="w"> </span><span class="n">internal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Downloading DAYMET data for: Field1 at 40.8430279883331/-82.8757922217347 latitude/longitude !
</code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Done !
</code></pre></div>  </div>
</blockquote>

<blockquote class="callout">
  <h1 id="exploring-the-daymet-data">Exploring the daymet data</h1>
  <p>We can use <code class="highlighter-rouge">str()</code> as we did in the last lesson to explore the new daymetr object <code class="highlighter-rouge">weather</code></p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">str</span><span class="p">(</span><span class="n">weather</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## List of 7
##  $ site     : chr "Field1"
##  $ tile     : num 11749
##  $ latitude : num 40.8
##  $ longitude: num -82.9
##  $ altitude : num 310
##  $ tile     : num 11749
##  $ data     :'data.frame':	6935 obs. of  9 variables:
##   ..$ year         : num [1:6935] 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...
##   ..$ yday         : num [1:6935] 1 2 3 4 5 6 7 8 9 10 ...
##   ..$ dayl..s.     : num [1:6935] 32832 32832 32832 33178 33178 ...
##   ..$ prcp..mm.day.: num [1:6935] 0 0 8 27 0 0 0 0 0 2 ...
##   ..$ srad..W.m.2. : num [1:6935] 259 234 163 182 195 ...
##   ..$ swe..kg.m.2. : num [1:6935] 52 52 44 44 44 40 40 40 40 36 ...
##   ..$ tmax..deg.c. : num [1:6935] 8.5 14 14.5 12 3.5 1.5 4 3.5 6.5 9 ...
##   ..$ tmin..deg.c. : num [1:6935] -4.5 3 4.5 0.5 -4.5 -4.5 -4 -5.5 -1.5 3 ...
##   ..$ vp..Pa.      : num [1:6935] 440 760 840 640 440 440 440 400 560 760 ...
##  - attr(*, "class")= chr "daymetr"
</code></pre></div>  </div>
  <p>The object <code class="highlighter-rouge">weather</code> is a list of 7 objects, the last of which is the data. In the next excerise we will explore what variables are in this dataframe.</p>
</blockquote>

<blockquote class="challenge">
  <h2 id="exercise-1-explore-the-weather-data">Exercise 1: Explore the weather data</h2>

  <ol>
    <li>Save the dataframe in <code class="highlighter-rouge">weather</code> with the name <code class="highlighter-rouge">weather_data</code>.</li>
    <li>How is the date reported?</li>
    <li>What other variables exist?</li>
    <li>What are the units for the different variables?
 *Remember: Sometimes you need to use a search engine or help(âfunctionnameâ) to understand what objects
 are created from a specific R function.</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weather_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">weather</span><span class="o">$</span><span class="n">data</span><span class="w">
</span><span class="n">str</span><span class="p">(</span><span class="n">weather_data</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 'data.frame':	6935 obs. of  9 variables:
##  $ year         : num  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...
##  $ yday         : num  1 2 3 4 5 6 7 8 9 10 ...
##  $ dayl..s.     : num  32832 32832 32832 33178 33178 ...
##  $ prcp..mm.day.: num  0 0 8 27 0 0 0 0 0 2 ...
##  $ srad..W.m.2. : num  259 234 163 182 195 ...
##  $ swe..kg.m.2. : num  52 52 44 44 44 40 40 40 40 36 ...
##  $ tmax..deg.c. : num  8.5 14 14.5 12 3.5 1.5 4 3.5 6.5 9 ...
##  $ tmin..deg.c. : num  -4.5 3 4.5 0.5 -4.5 -4.5 -4 -5.5 -1.5 3 ...
##  $ vp..Pa.      : num  440 760 840 640 440 440 440 400 560 760 ...
</code></pre></div>    </div>
    <p>The date is reported as the year and day of the year. 
Other variables include day length, precipitation, solar radiation, snow water equivalent, maximum temperature, minimum temperature, and vapor pressure. 
The units for the variables are given after the variable name. For example, day length is in seconds and solar radiation is in watts per square meter. While precipitation and temperature have intuitive names, vapor pressure and snow water equivalent are not so apparent. 
Use the <code class="highlighter-rouge">daymetr</code> <a href="https://cran.r-project.org/web/packages/daymetr/vignettes/daymetr-vignette.html">vignette</a> to understand the meaning of these variables.</p>

  </blockquote>
</blockquote>

<blockquote class="callout">
  <h1 id="dates-in-dataframes">Dates in Dataframes</h1>
  <p><strong>DENA: Whatâs the goal here? What are we going to be doing with the dates once we have them? A sentence or two about that would help with contextualizing it rather than jumping into the fact that R has it without telling us how weâll use it.</strong>
There are many operations we might do with dates, such as eliminating the dates outside of the growing season, but there is a class within R for dates. Once a column is of the <code class="highlighter-rouge">date</code> class, we can perform actions
like ordering the data by time, finding the data in a certain time period, or calculating the days between two dates. 
The function <code class="highlighter-rouge">as.Date()</code> converts a column to a date, but here if we try 
the command <code class="highlighter-rouge">weather_data$date &lt;- as.Date(weather_data$yday)</code>, we will receive an error 
saying an origin must be supplied.</p>

  <p>The function can see that the date is in days after some starting time or origin. The name
<code class="highlighter-rouge">yday</code> means this is the day of the year, so the origin should be the last day of the 
previous year. There are multiple years in our dataframe, so the origin should change 
for each year. This is accomplished in the function as.Date.daymetr(). To see this code and understand how &gt; it works go to the <a href="https://github.com/data-carpentry-for-agriculture/trial-lesson/blob/gh-pages/_episodes_rmd/functions.R">functions script</a> in github.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weather_data</span><span class="o">$</span><span class="n">date</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.Date.daymetr</span><span class="p">(</span><span class="n">weather_data</span><span class="p">)</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">date</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "2000-01-01" "2000-01-02" "2000-01-03" "2000-01-04" "2000-01-05"
## [6] "2000-01-06"
</code></pre></div>  </div>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">class</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">date</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "Date"
</code></pre></div>  </div>
</blockquote>

<blockquote class="callout">
  <h1 id="unit-conversions">Unit Conversions</h1>

  <p>Publicly available data are usually given in metric units as we saw in the weather data 
above. We may want to have these data in imperial units as these are the units we are using
to think about yield and other values in the United States. You may know the value of crop requirements and threshholds in imperial units rather than metric units. For example, a goal of 18 inches of rain during the corn season.</p>

  <p>The package <code class="highlighter-rouge">measurements</code> is used for converting different types of measurements from one unit to another. The 
command <code class="highlighter-rouge">conv_unit()</code> converts the column from one stated unit to another unit.
Another useful function in the package is <code class="highlighter-rouge">conv_unit_options</code> which gives the possible units for a specific kind of measure (e.g. length, area, weight, etc.).</p>

  <p>We have made simple functions for converting units using <code class="highlighter-rouge">conv_unit()</code> these are in <code class="highlighter-rouge">functions.R</code> and can be sourced within your code. For example, the function <code class="highlighter-rouge">mm_to_in()</code> can convert the daily precipitation from milimeters to inches. The following lines converts <code class="highlighter-rouge">prcp..mm.day.</code> to inches and creates a new column called <code class="highlighter-rouge">prec</code>.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weather_data</span><span class="o">$</span><span class="n">prec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mm_to_in</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">prcp..mm.day.</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>
</blockquote>

<blockquote class="challenge">
  <h2 id="exercise-2-unit-conversions">Exercise 2: Unit Conversions</h2>

  <ol>
    <li>Convert the two temperature variables into fahrenheit from celsius using the function <code class="highlighter-rouge">c_to_f()</code> with the names <code class="highlighter-rouge">tmax</code> and <code class="highlighter-rouge">tmin</code>.</li>
    <li>What is the maximum and minimum temperature recorded?</li>
  </ol>

  <blockquote class="solution">
    <h2 id="exercise-2-solutions">Exercise 2 Solutions</h2>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weather_data</span><span class="o">$</span><span class="n">tmax</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">c_to_f</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">tmax..deg.c.</span><span class="p">)</span><span class="w"> 
</span><span class="n">weather_data</span><span class="o">$</span><span class="n">tmin</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">c_to_f</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">tmin..deg.c.</span><span class="p">)</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">tmax</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 47.3 57.2 58.1 53.6 38.3 34.7
</code></pre></div>    </div>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">max</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">tmax</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 97.7
</code></pre></div>    </div>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">min</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">tmin</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] -16.6
</code></pre></div>    </div>
    <p>The maximum temperature during this time period was 94 degrees, and the minimum temperature was -13 degrees.</p>
  </blockquote>
</blockquote>

<blockquote class="callout">
  <h1 id="precipitation-graph">Precipitation Graph</h1>

  <p>Perhaps you want to see what the weather this year was like compared to the typical year.
We are going make a graph showing the total monthly precipitation from
2018 compared to the average precipitation from the years 2000 to 2017. This is a common way
to look at seasonal rainfall and allows us to look at the rainfall during the critical months
of July and August. First, we need to organize the data in a new dataset with the average total rainfall for each month.</p>
</blockquote>

<blockquote class="callout">
  <h1 id="adding-a-month-variable">Adding a month variable</h1>

  <p>Currently, there is no month variable in our dataframe. Once you have a date object, there is a package called <code class="highlighter-rouge">lubridate</code>
that facilitates additional time or date related calculations. Perhaps you want a new column with the day of the week or a measure of time lapsed between two observations. We use the command <code class="highlighter-rouge">month()</code> to add a 
variable called <code class="highlighter-rouge">month</code> to the dataframe. The option <code class="highlighter-rouge">label = TRUE</code> creates a string with the 
month name instead of a number. We use this option because the month name will look better on the graph than a number.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weather_data</span><span class="o">$</span><span class="n">month</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lubridate</span><span class="o">::</span><span class="n">month</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">date</span><span class="p">,</span><span class="w"> </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">weather_data</span><span class="o">$</span><span class="n">month</span><span class="p">)</span><span class="w">

</span><span class="n">This</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">good</span><span class="w"> </span><span class="n">time</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="n">save</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">dataframe</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">your</span><span class="w"> </span><span class="n">working</span><span class="w"> </span><span class="n">directory.</span><span class="w"> </span><span class="n">The</span><span class="w"> </span><span class="k">function</span><span class="w"> </span><span class="n">`write.csv()`</span><span class="w"> </span><span class="n">writes</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">dataframe</span><span class="w"> </span><span class="p">(</span><span class="n">`weather_data`</span><span class="p">)</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">working</span><span class="w"> </span><span class="n">directory</span><span class="w"> </span><span class="n">with</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="n">you</span><span class="w"> </span><span class="n">supply</span><span class="w"> </span><span class="p">(</span><span class="n">weather_2000_2018.csv</span><span class="p">)</span><span class="n">.</span><span class="w"> 
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error: &lt;text&gt;:4:6: unexpected symbol
## 3: 
## 4: This is
##         ^
</code></pre></div>  </div>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">write</span><span class="w"> </span><span class="n">.csv</span><span class="p">(</span><span class="n">weather_data</span><span class="p">,</span><span class="w"> </span><span class="s2">"weather_2000_2018.csv"</span><span class="p">)</span><span class="w"> 
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error: &lt;text&gt;:1:7: unexpected symbol
## 1: write .csv
##           ^
</code></pre></div>  </div>
</blockquote>

<blockquote class="callout">
  <h1 id="taking-sum-or-average-by-groups">Taking sum or average by groups</h1>

  <p>Now, we need to sum the daily precipitation for each year and month combination. There is a 
package called <code class="highlighter-rouge">dplyr</code> that helps with many kinds of data manipulation. A popular task is to 
perform an action over a group, like taking the sum of something. To specify the grouping variables, you use <code class="highlighter-rouge">group_by()</code> then add the additional
command <code class="highlighter-rouge">summarise()</code> which defines the action. For this exercise we wrote functions that use <code class="highlighter-rouge">dplyr</code> to make the task simpler for you. The functions <code class="highlighter-rouge">sumprec_by_monthyear()</code> and <code class="highlighter-rouge">avgprec_by_month()</code> are in <code class="highlighter-rouge">functions.R</code>. You can read these functions to make similar functions on your own.</p>

  <p>First we use the command to calculate the total precipitation for each month in each year.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">by_month_year</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sumprec_by_monthyear</span><span class="p">(</span><span class="n">weather_data</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error: Column `month` is unknown
</code></pre></div>  </div>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">(</span><span class="n">by_month_year</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in head(by_month_year): object 'by_month_year' not found
</code></pre></div>  </div>

  <p>Now we have a dataframe with the rainfall for each month of each year, where the first rows of the dataframe are for January.</p>
</blockquote>

<blockquote class="callout">
  <h1 id="subsetting-the-data">Subsetting the data</h1>

  <p>Now we want to separate the 2018 data from the rest of the years 
before we take the average monthly precipitation. Separating part of the dataframe is called subsetting. A subset is a set of observations that are all present in an existing dataframe; generally, the subset will have some characteristic in common such as year, month, etc. The function <code class="highlighter-rouge">subset()</code> requires two inputs, the dataframe to be subsetted and the characteristics to subset on in the form of logical expressions. We will take the subset of <code class="highlighter-rouge">by_month_year</code> that is in 2018.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monthprec_2018</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">subset</span><span class="p">(</span><span class="n">by_month_year</span><span class="p">,</span><span class="w"> </span><span class="n">year</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2018</span><span class="p">)</span><span class="w"> 
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in subset(by_month_year, year == 2018): object 'by_month_year' not found
</code></pre></div>  </div>
</blockquote>

<blockquote class="challenge">
  <h2 id="exercise-3-subsetting">Exercise 3: Subsetting</h2>

  <p>Name the subset of <code class="highlighter-rouge">by_month_year</code> that is not in 2018  monthprec_hist, find the total precipitation in June of 2015.</p>

  <blockquote class="solution">
    <h2 id="exercise-3-solution">Exercise 3 Solution</h2>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">subset</span><span class="p">(</span><span class="n">by_month_year</span><span class="p">,</span><span class="w"> </span><span class="n">year</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="m">2018</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in subset(by_month_year, year != 2018): object 'by_month_year' not found
</code></pre></div>    </div>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">subset</span><span class="p">(</span><span class="n">by_month_year</span><span class="p">,</span><span class="w"> </span><span class="n">year</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2015</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in subset(by_month_year, year == 2015): object 'by_month_year' not found
</code></pre></div>    </div>
    <p>We see that the monthly rainfall in June was 7.91 inches. We could also find this by taking a subset with the year and month.</p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">subset</span><span class="p">(</span><span class="n">by_month_year</span><span class="p">,</span><span class="w"> </span><span class="n">year</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2015</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">month</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"Jun"</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in subset(by_month_year, year == 2015 &amp; month == "Jun"): object 'by_month_year' not found
</code></pre></div>    </div>

  </blockquote>
</blockquote>

<blockquote class="callout">
  <h1 id="take-the-average-of-monthly-rainfall">Take the average of monthly rainfall</h1>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monthprec_hist</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">avgprec_by_month</span><span class="p">(</span><span class="n">subset</span><span class="p">(</span><span class="n">by_month_year</span><span class="p">,</span><span class="w"> </span><span class="n">year</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="m">2018</span><span class="p">))</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in subset(by_month_year, year != 2018): object 'by_month_year' not found
</code></pre></div>  </div>
</blockquote>

<blockquote class="callout">
  <h1 id="merging">Merging</h1>

  <p>We now have two separate dataframes <code class="highlighter-rouge">by_month_2018</code> and <code class="highlighter-rouge">by_month</code>
with the rainfall for each
month. We can use the common variable <code class="highlighter-rouge">month</code> to merge them into
one dataframe with the average
monthly rainfall and the 2018 monthly rainfall using the <code class="highlighter-rouge">merge()</code>
function.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prec_plot</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">merge</span><span class="p">(</span><span class="n">monthprec_hist</span><span class="p">,</span><span class="w"> </span><span class="n">monthprec_2018</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"month"</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in merge(monthprec_hist, monthprec_2018, by = "month"): object 'monthprec_hist' not found
</code></pre></div>  </div>
</blockquote>

<blockquote class="callout">
  <h1 id="making-the-graph">Making the graph</h1>

  <p>We will now use <code class="highlighter-rouge">ggplot</code> to create a graph with a bar representing
the monthly precipitation 
in 2018 and a point with the average rainfall from 2000 to 2017. In 
the function <code class="highlighter-rouge">geom_bar()</code> <code class="highlighter-rouge">stat = identity</code> creates a bar graph 
where the height of the bar is the value of the 
variable rather than the count of the observations, the common use 
of a bar chart.</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monthly_prec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">prec_plot</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">month</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prec_month</span><span class="p">),</span><span class="w"> </span><span class="n">stat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'identity'</span><span class="p">)</span><span class="w"> 
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in ggplot(prec_plot): object 'prec_plot' not found
</code></pre></div>  </div>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monthly_prec</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">month</span><span class="p">,</span><span class="w"> </span><span class="n">prec_avg</span><span class="p">),</span><span class="w"> </span><span class="n">show.legend</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ggtitle</span><span class="p">(</span><span class="s2">"2018 Monthly Precipitation Compared to Average"</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Error in eval(expr, envir, enclos): object 'monthly_prec' not found
</code></pre></div>  </div>

  <p>The most notable feature of the weather graph is the below average rainfall in July, the most 
critical growing period for corn. To understand whether this affected yield on the field, we
woud also need to look at historic yield. But on your field, you will know those historic
average and be able to have a pretty clear idea of how weather impacted the average yield in
a growing season.</p>

  <p>There are many possible uses for this weather data. You can calculate cumulative rainfall when it rains for consecutive days or calculate the accumulated GDD. These are more complex operations, but we can help you with the code if you are interested.</p>
</blockquote>

:ET